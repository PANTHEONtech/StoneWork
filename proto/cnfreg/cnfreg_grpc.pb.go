// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: cnfreg/cnfreg.proto

package cnfreg

import (
	context "context"
	generic "go.ligato.io/vpp-agent/v3/proto/ligato/generic"
	puntmgr "go.pantheon.tech/stonework/proto/puntmgr"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CnfDiscoveryClient is the client API for CnfDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CnfDiscoveryClient interface {
	// DiscoverCnf is served by the CNFRegistry of each SW-Module CNF.
	// It is called by StoneWork during Init of CNFRegistry.
	DiscoverCnf(ctx context.Context, in *DiscoverCnfReq, opts ...grpc.CallOption) (*DiscoverCnfResp, error)
	// GetPuntRequests is served by CNFRegistry of a SW-Module CNF and returns the set of packet punt
	// requests corresponding to the given configuration item.
	GetPuntRequests(ctx context.Context, in *generic.Item, opts ...grpc.CallOption) (*puntmgr.PuntRequests, error)
	// GetItemDependencies is served by CNFRegistry of a SW-Module CNF and returns
	// the set of dependencies of the given configuration item (apart from punt deps which are determined
	// from punt requests).
	GetItemDependencies(ctx context.Context, in *generic.Item, opts ...grpc.CallOption) (*GetDependenciesResp, error)
}

type cnfDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewCnfDiscoveryClient(cc grpc.ClientConnInterface) CnfDiscoveryClient {
	return &cnfDiscoveryClient{cc}
}

func (c *cnfDiscoveryClient) DiscoverCnf(ctx context.Context, in *DiscoverCnfReq, opts ...grpc.CallOption) (*DiscoverCnfResp, error) {
	out := new(DiscoverCnfResp)
	err := c.cc.Invoke(ctx, "/cnfreg.CnfDiscovery/DiscoverCnf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnfDiscoveryClient) GetPuntRequests(ctx context.Context, in *generic.Item, opts ...grpc.CallOption) (*puntmgr.PuntRequests, error) {
	out := new(puntmgr.PuntRequests)
	err := c.cc.Invoke(ctx, "/cnfreg.CnfDiscovery/GetPuntRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnfDiscoveryClient) GetItemDependencies(ctx context.Context, in *generic.Item, opts ...grpc.CallOption) (*GetDependenciesResp, error) {
	out := new(GetDependenciesResp)
	err := c.cc.Invoke(ctx, "/cnfreg.CnfDiscovery/GetItemDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CnfDiscoveryServer is the server API for CnfDiscovery service.
// All implementations must embed UnimplementedCnfDiscoveryServer
// for forward compatibility
type CnfDiscoveryServer interface {
	// DiscoverCnf is served by the CNFRegistry of each SW-Module CNF.
	// It is called by StoneWork during Init of CNFRegistry.
	DiscoverCnf(context.Context, *DiscoverCnfReq) (*DiscoverCnfResp, error)
	// GetPuntRequests is served by CNFRegistry of a SW-Module CNF and returns the set of packet punt
	// requests corresponding to the given configuration item.
	GetPuntRequests(context.Context, *generic.Item) (*puntmgr.PuntRequests, error)
	// GetItemDependencies is served by CNFRegistry of a SW-Module CNF and returns
	// the set of dependencies of the given configuration item (apart from punt deps which are determined
	// from punt requests).
	GetItemDependencies(context.Context, *generic.Item) (*GetDependenciesResp, error)
	mustEmbedUnimplementedCnfDiscoveryServer()
}

// UnimplementedCnfDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedCnfDiscoveryServer struct {
}

func (UnimplementedCnfDiscoveryServer) DiscoverCnf(context.Context, *DiscoverCnfReq) (*DiscoverCnfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverCnf not implemented")
}
func (UnimplementedCnfDiscoveryServer) GetPuntRequests(context.Context, *generic.Item) (*puntmgr.PuntRequests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPuntRequests not implemented")
}
func (UnimplementedCnfDiscoveryServer) GetItemDependencies(context.Context, *generic.Item) (*GetDependenciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemDependencies not implemented")
}
func (UnimplementedCnfDiscoveryServer) mustEmbedUnimplementedCnfDiscoveryServer() {}

// UnsafeCnfDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CnfDiscoveryServer will
// result in compilation errors.
type UnsafeCnfDiscoveryServer interface {
	mustEmbedUnimplementedCnfDiscoveryServer()
}

func RegisterCnfDiscoveryServer(s grpc.ServiceRegistrar, srv CnfDiscoveryServer) {
	s.RegisterService(&CnfDiscovery_ServiceDesc, srv)
}

func _CnfDiscovery_DiscoverCnf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverCnfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnfDiscoveryServer).DiscoverCnf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnfreg.CnfDiscovery/DiscoverCnf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnfDiscoveryServer).DiscoverCnf(ctx, req.(*DiscoverCnfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CnfDiscovery_GetPuntRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(generic.Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnfDiscoveryServer).GetPuntRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnfreg.CnfDiscovery/GetPuntRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnfDiscoveryServer).GetPuntRequests(ctx, req.(*generic.Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _CnfDiscovery_GetItemDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(generic.Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnfDiscoveryServer).GetItemDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnfreg.CnfDiscovery/GetItemDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnfDiscoveryServer).GetItemDependencies(ctx, req.(*generic.Item))
	}
	return interceptor(ctx, in, info, handler)
}

// CnfDiscovery_ServiceDesc is the grpc.ServiceDesc for CnfDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CnfDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cnfreg.CnfDiscovery",
	HandlerType: (*CnfDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverCnf",
			Handler:    _CnfDiscovery_DiscoverCnf_Handler,
		},
		{
			MethodName: "GetPuntRequests",
			Handler:    _CnfDiscovery_GetPuntRequests_Handler,
		},
		{
			MethodName: "GetItemDependencies",
			Handler:    _CnfDiscovery_GetItemDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cnfreg/cnfreg.proto",
}
