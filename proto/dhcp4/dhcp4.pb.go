// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: dhcp4/dhcp4.proto

package dhcp4

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InterfacesConfig_IfSocketType int32

const (
	InterfacesConfig_UNDEFINED InterfacesConfig_IfSocketType = 0
	InterfacesConfig_UDP       InterfacesConfig_IfSocketType = 1
	InterfacesConfig_RAW       InterfacesConfig_IfSocketType = 2
)

// Enum value maps for InterfacesConfig_IfSocketType.
var (
	InterfacesConfig_IfSocketType_name = map[int32]string{
		0: "UNDEFINED",
		1: "UDP",
		2: "RAW",
	}
	InterfacesConfig_IfSocketType_value = map[string]int32{
		"UNDEFINED": 0,
		"UDP":       1,
		"RAW":       2,
	}
)

func (x InterfacesConfig_IfSocketType) Enum() *InterfacesConfig_IfSocketType {
	p := new(InterfacesConfig_IfSocketType)
	*p = x
	return p
}

func (x InterfacesConfig_IfSocketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfacesConfig_IfSocketType) Descriptor() protoreflect.EnumDescriptor {
	return file_dhcp4_dhcp4_proto_enumTypes[0].Descriptor()
}

func (InterfacesConfig_IfSocketType) Type() protoreflect.EnumType {
	return &file_dhcp4_dhcp4_proto_enumTypes[0]
}

func (x InterfacesConfig_IfSocketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfacesConfig_IfSocketType.Descriptor instead.
func (InterfacesConfig_IfSocketType) EnumDescriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{0, 0}
}

// The interfaces-config map specifies the server configuration concerning the network interfaces,
// on which the server should listen to the DHCP messages. The interfaces parameter specifies a list of
// network interfaces on which the server should listen.
// For a more detailed explanation see: https://downloads.isc.org/isc/kea/1.5.0/doc/kea-guide.html#dhcp4-configuration (10th paragraph)
// For a reference also explaining fields see: https://downloads.isc.org/isc/kea/1.5.0/doc/kea-guide.html#dhcp4-interface-configuration
type InterfacesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies a list of Linux interfaces on which the Kea DHCPv4 should listen.
	// The interfaces should be referenced by their logical names, not the host interface names.
	// If the CNF runs as StoneWork module it is not supported to reference Linux interfaces directly,
	// instead DHCP should be configured for VPP VRFs (see vpp_vrf field) and the proxying/punting
	// of DHCP requests from VPP to Linux will be configured automatically.
	LinuxInterfaces []string `protobuf:"bytes,1,rep,name=linux_interfaces,json=linuxInterfaces,proto3" json:"linux_interfaces,omitempty"`
	// If VPP is used as data-plane (i.e. CNF-DHCP is integrated with StoneWork), here it is possible
	// to specify the list of VRFs from which DHCP requests will be punted into Kea DHCPv4.
	VppVrfs []uint32 `protobuf:"varint,2,rep,packed,name=vpp_vrfs,json=vppVrfs,proto3" json:"vpp_vrfs,omitempty"`
	// The dhcp-socket-type specifies that the IP/UDP sockets will be opened on
	// all interfaces on which the server listens.
	// If the dhcp-socket-type is set to raw, it configures the server to use raw sockets instead.
	// If the dhcp-socket-type value is not specified, the default value raw is used.
	// Using UDP sockets automatically disables the reception of broadcast packets from directly connected clients.
	// This effectively means that the UDP sockets can be used for relayed traffic only.
	// When using the raw sockets, both the traffic from the directly connected clients and the relayed traffic will be handled.
	// Caution should be taken when configuring the server to open multiple raw sockets on the interface with several IPv4 addresses assigned.
	// If the directly connected client sends the message to the broadcast address all sockets on this link will receive
	// this message and multiple responses will be sent to the client. Hence, the configuration with multiple IPv4 addresses
	// assigned to the interface should not be used when the directly connected clients are operating on that link.
	// To use a single address on such interface, the "interface-name/address" notation should be used.
	DhcpSocketType InterfacesConfig_IfSocketType `protobuf:"varint,3,opt,name=dhcp_socket_type,json=dhcpSocketType,proto3,enum=dhcp4.InterfacesConfig_IfSocketType" json:"dhcp_socket_type,omitempty"`
}

func (x *InterfacesConfig) Reset() {
	*x = InterfacesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp4_dhcp4_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfacesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesConfig) ProtoMessage() {}

func (x *InterfacesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp4_dhcp4_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesConfig.ProtoReflect.Descriptor instead.
func (*InterfacesConfig) Descriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{0}
}

func (x *InterfacesConfig) GetLinuxInterfaces() []string {
	if x != nil {
		return x.LinuxInterfaces
	}
	return nil
}

func (x *InterfacesConfig) GetVppVrfs() []uint32 {
	if x != nil {
		return x.VppVrfs
	}
	return nil
}

func (x *InterfacesConfig) GetDhcpSocketType() InterfacesConfig_IfSocketType {
	if x != nil {
		return x.DhcpSocketType
	}
	return InterfacesConfig_UNDEFINED
}

// For a more detailed explanation see: https://downloads.isc.org/isc/kea/1.5.0/doc/kea-guide.html#dhcp4-address-config
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address range used for client assignments.
	Pool string `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	// Pool level list of DHCP options.
	OptionData []*OptionData `protobuf:"bytes,4,rep,name=option_data,json=optionData,proto3" json:"option_data,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp4_dhcp4_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp4_dhcp4_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{1}
}

func (x *Pool) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Pool) GetOptionData() []*OptionData {
	if x != nil {
		return x.OptionData
	}
	return nil
}

// List of IPv4 relay addresses for which this subnet is
// selected.
// For a more detailed explanation see: https://downloads.isc.org/isc/kea/1.5.0/doc/kea-guide.html#dhcp4-relay-override
type Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddresses []string `protobuf:"bytes,1,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
}

func (x *Relay) Reset() {
	*x = Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp4_dhcp4_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp4_dhcp4_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{2}
}

func (x *Relay) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

// For a more detailed explanation see: https://downloads.isc.org/isc/kea/1.5.0/doc/kea-guide.html#dhcp4-std-options
type OptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name parameter specifies the option name.
	// For a list of currently supported names, see: https://downloads.isc.org/isc/kea/1.5.0/doc/kea-guide.html#dhcp4-std-options-list
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Option data to be stored in the option payload.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// option code.
	Code int32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	// Option space. The default value "dhcp4" designates the
	// top level option space.
	Space string `protobuf:"bytes,5,opt,name=space,proto3" json:"space,omitempty"`
	// Boolean flag indicating if the given option is always
	// send in response or only when requested. The default
	// value of false indicates that it is only sent when
	// requested.
	AlwaysSend bool `protobuf:"varint,6,opt,name=always_send,json=alwaysSend,proto3" json:"always_send,omitempty"`
}

func (x *OptionData) Reset() {
	*x = OptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp4_dhcp4_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionData) ProtoMessage() {}

func (x *OptionData) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp4_dhcp4_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionData.ProtoReflect.Descriptor instead.
func (*OptionData) Descriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{3}
}

func (x *OptionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptionData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *OptionData) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OptionData) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *OptionData) GetAlwaysSend() bool {
	if x != nil {
		return x.AlwaysSend
	}
	return false
}

// For a more detailed explanation see: https://downloads.isc.org/isc/kea/1.5.0/doc/kea-guide.html#dhcp4-address-config
type IPv4Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Ip address pools belonging to the subnet.
	Pools []*Pool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	// Subnet prefix.
	Subnet string `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// List of IPv4 relay addresses for which this subnet is
	// selected.
	Relay *Relay `protobuf:"bytes,3,opt,name=relay,proto3" json:"relay,omitempty"`
	// Subnet level list of DHCP options.
	OptionData []*OptionData `protobuf:"bytes,4,rep,name=option_data,json=optionData,proto3" json:"option_data,omitempty"`
	// Specifies that this subnet is selected for the requests
	// received on the particular interface.
	// The field should reference the Linux interface by its logical name.
	// It is not valid to specify both linux_interface and vpp_vrf for the same subnet.
	LinuxInterface string `protobuf:"bytes,5,opt,name=linux_interface,json=linuxInterface,proto3" json:"linux_interface,omitempty"`
	// Specifies that this subnet is selected for the requests
	// received on the particular VPP VRF (which has DHCP requests proxied to Kea DHCP server).
	// It is not valid to specify both linux_interface and vpp_vrf for the same subnet.
	VppVrf *IPv4Subnet_VppVrf `protobuf:"bytes,6,opt,name=vpp_vrf,json=vppVrf,proto3" json:"vpp_vrf,omitempty"`
}

func (x *IPv4Subnet) Reset() {
	*x = IPv4Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp4_dhcp4_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4Subnet) ProtoMessage() {}

func (x *IPv4Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp4_dhcp4_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4Subnet.ProtoReflect.Descriptor instead.
func (*IPv4Subnet) Descriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{4}
}

func (x *IPv4Subnet) GetPools() []*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *IPv4Subnet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *IPv4Subnet) GetRelay() *Relay {
	if x != nil {
		return x.Relay
	}
	return nil
}

func (x *IPv4Subnet) GetOptionData() []*OptionData {
	if x != nil {
		return x.OptionData
	}
	return nil
}

func (x *IPv4Subnet) GetLinuxInterface() string {
	if x != nil {
		return x.LinuxInterface
	}
	return ""
}

func (x *IPv4Subnet) GetVppVrf() *IPv4Subnet_VppVrf {
	if x != nil {
		return x.VppVrf
	}
	return nil
}

// DHCPv4 specific configuration proto message.
type Dhcp4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfacesConfig *InterfacesConfig `protobuf:"bytes,1,opt,name=interfaces_config,json=interfacesConfig,proto3" json:"interfaces_config,omitempty"`
	// Shared network level valid lifetime.
	// valid_lifetime (in seconds) defines how long the addresses (leases) given out by the server are valid.
	ValidLifetime int32 `protobuf:"varint,2,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	// Global value for the renew timer, i.e. the timer after which the
	// DHCP client renews the lease.
	// renew-timer (in seconds) defines a timer that governs when the client will begin the renewal procedure.
	RenewTimer int32 `protobuf:"varint,3,opt,name=renew_timer,json=renewTimer,proto3" json:"renew_timer,omitempty"`
	// Global value for the rebind timer, i.e. the time after which the
	// DHCP client enters rebind state if it fails to renew the lease.
	// rebind-timer (in seconds) defines a timer that governs when the client will begin the rebind procedure.
	RebindTimer int32 `protobuf:"varint,4,opt,name=rebind_timer,json=rebindTimer,proto3" json:"rebind_timer,omitempty"`
	// List of IPv4 subnets belonging to this network.
	Subnets []*IPv4Subnet `protobuf:"bytes,5,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *Dhcp4) Reset() {
	*x = Dhcp4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp4_dhcp4_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dhcp4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dhcp4) ProtoMessage() {}

func (x *Dhcp4) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp4_dhcp4_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dhcp4.ProtoReflect.Descriptor instead.
func (*Dhcp4) Descriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{5}
}

func (x *Dhcp4) GetInterfacesConfig() *InterfacesConfig {
	if x != nil {
		return x.InterfacesConfig
	}
	return nil
}

func (x *Dhcp4) GetValidLifetime() int32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *Dhcp4) GetRenewTimer() int32 {
	if x != nil {
		return x.RenewTimer
	}
	return 0
}

func (x *Dhcp4) GetRebindTimer() int32 {
	if x != nil {
		return x.RebindTimer
	}
	return 0
}

func (x *Dhcp4) GetSubnets() []*IPv4Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

// Vrf is encapsulated inside a message to differentiate between unset and zero value.
type IPv4Subnet_VppVrf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vrf uint32 `protobuf:"varint,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
}

func (x *IPv4Subnet_VppVrf) Reset() {
	*x = IPv4Subnet_VppVrf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp4_dhcp4_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4Subnet_VppVrf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4Subnet_VppVrf) ProtoMessage() {}

func (x *IPv4Subnet_VppVrf) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp4_dhcp4_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4Subnet_VppVrf.ProtoReflect.Descriptor instead.
func (*IPv4Subnet_VppVrf) Descriptor() ([]byte, []int) {
	return file_dhcp4_dhcp4_proto_rawDescGZIP(), []int{4, 0}
}

func (x *IPv4Subnet_VppVrf) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

var File_dhcp4_dhcp4_proto protoreflect.FileDescriptor

var file_dhcp4_dhcp4_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64, 0x68, 0x63, 0x70, 0x34, 0x22, 0xd9, 0x01, 0x0a, 0x10, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x70,
	0x70, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x70,
	0x70, 0x56, 0x72, 0x66, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x66, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x68, 0x63, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x0c, 0x49, 0x66, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x41, 0x57, 0x10, 0x02, 0x22, 0x4e, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x7f, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53,
	0x65, 0x6e, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x0a, 0x49, 0x50, 0x76, 0x34, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x22, 0x0a,
	0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x68, 0x63, 0x70, 0x34, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x76, 0x70, 0x70, 0x5f, 0x76, 0x72, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x56, 0x70, 0x70, 0x56, 0x72, 0x66, 0x52, 0x06, 0x76, 0x70, 0x70, 0x56, 0x72,
	0x66, 0x1a, 0x1a, 0x0a, 0x06, 0x56, 0x70, 0x70, 0x56, 0x72, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x72, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x72, 0x66, 0x22, 0xe5, 0x01,
	0x0a, 0x05, 0x44, 0x68, 0x63, 0x70, 0x34, 0x12, 0x44, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x34, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x62,
	0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x68, 0x63, 0x70,
	0x34, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x42, 0x2a, 0x5a, 0x28, 0x70, 0x61, 0x6e, 0x74, 0x68, 0x65, 0x6f,
	0x6e, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6e, 0x66, 0x2d, 0x64, 0x68, 0x63, 0x70, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x34, 0x3b, 0x64, 0x68, 0x63, 0x70,
	0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dhcp4_dhcp4_proto_rawDescOnce sync.Once
	file_dhcp4_dhcp4_proto_rawDescData = file_dhcp4_dhcp4_proto_rawDesc
)

func file_dhcp4_dhcp4_proto_rawDescGZIP() []byte {
	file_dhcp4_dhcp4_proto_rawDescOnce.Do(func() {
		file_dhcp4_dhcp4_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp4_dhcp4_proto_rawDescData)
	})
	return file_dhcp4_dhcp4_proto_rawDescData
}

var file_dhcp4_dhcp4_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dhcp4_dhcp4_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dhcp4_dhcp4_proto_goTypes = []interface{}{
	(InterfacesConfig_IfSocketType)(0), // 0: dhcp4.InterfacesConfig.IfSocketType
	(*InterfacesConfig)(nil),           // 1: dhcp4.InterfacesConfig
	(*Pool)(nil),                       // 2: dhcp4.Pool
	(*Relay)(nil),                      // 3: dhcp4.Relay
	(*OptionData)(nil),                 // 4: dhcp4.OptionData
	(*IPv4Subnet)(nil),                 // 5: dhcp4.IPv4Subnet
	(*Dhcp4)(nil),                      // 6: dhcp4.Dhcp4
	(*IPv4Subnet_VppVrf)(nil),          // 7: dhcp4.IPv4Subnet.VppVrf
}
var file_dhcp4_dhcp4_proto_depIdxs = []int32{
	0, // 0: dhcp4.InterfacesConfig.dhcp_socket_type:type_name -> dhcp4.InterfacesConfig.IfSocketType
	4, // 1: dhcp4.Pool.option_data:type_name -> dhcp4.OptionData
	2, // 2: dhcp4.IPv4Subnet.pools:type_name -> dhcp4.Pool
	3, // 3: dhcp4.IPv4Subnet.relay:type_name -> dhcp4.Relay
	4, // 4: dhcp4.IPv4Subnet.option_data:type_name -> dhcp4.OptionData
	7, // 5: dhcp4.IPv4Subnet.vpp_vrf:type_name -> dhcp4.IPv4Subnet.VppVrf
	1, // 6: dhcp4.Dhcp4.interfaces_config:type_name -> dhcp4.InterfacesConfig
	5, // 7: dhcp4.Dhcp4.subnets:type_name -> dhcp4.IPv4Subnet
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_dhcp4_dhcp4_proto_init() }
func file_dhcp4_dhcp4_proto_init() {
	if File_dhcp4_dhcp4_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhcp4_dhcp4_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfacesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp4_dhcp4_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp4_dhcp4_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp4_dhcp4_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp4_dhcp4_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp4_dhcp4_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dhcp4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp4_dhcp4_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4Subnet_VppVrf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp4_dhcp4_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dhcp4_dhcp4_proto_goTypes,
		DependencyIndexes: file_dhcp4_dhcp4_proto_depIdxs,
		EnumInfos:         file_dhcp4_dhcp4_proto_enumTypes,
		MessageInfos:      file_dhcp4_dhcp4_proto_msgTypes,
	}.Build()
	File_dhcp4_dhcp4_proto = out.File
	file_dhcp4_dhcp4_proto_rawDesc = nil
	file_dhcp4_dhcp4_proto_goTypes = nil
	file_dhcp4_dhcp4_proto_depIdxs = nil
}
