// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: puntmgr/puntmgr.proto

package puntmgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PuntManagerClient is the client API for PuntManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PuntManagerClient interface {
	// UpdatePuntState is called by Punt Manager of StoneWork to notify SW-Module about state change of a punt.
	UpdatePuntState(ctx context.Context, in *UpdatePuntStateReq, opts ...grpc.CallOption) (*UpdatePuntStateResp, error)
}

type puntManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPuntManagerClient(cc grpc.ClientConnInterface) PuntManagerClient {
	return &puntManagerClient{cc}
}

func (c *puntManagerClient) UpdatePuntState(ctx context.Context, in *UpdatePuntStateReq, opts ...grpc.CallOption) (*UpdatePuntStateResp, error) {
	out := new(UpdatePuntStateResp)
	err := c.cc.Invoke(ctx, "/puntmgr.PuntManager/UpdatePuntState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PuntManagerServer is the server API for PuntManager service.
// All implementations must embed UnimplementedPuntManagerServer
// for forward compatibility
type PuntManagerServer interface {
	// UpdatePuntState is called by Punt Manager of StoneWork to notify SW-Module about state change of a punt.
	UpdatePuntState(context.Context, *UpdatePuntStateReq) (*UpdatePuntStateResp, error)
	mustEmbedUnimplementedPuntManagerServer()
}

// UnimplementedPuntManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPuntManagerServer struct {
}

func (UnimplementedPuntManagerServer) UpdatePuntState(context.Context, *UpdatePuntStateReq) (*UpdatePuntStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePuntState not implemented")
}
func (UnimplementedPuntManagerServer) mustEmbedUnimplementedPuntManagerServer() {}

// UnsafePuntManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PuntManagerServer will
// result in compilation errors.
type UnsafePuntManagerServer interface {
	mustEmbedUnimplementedPuntManagerServer()
}

func RegisterPuntManagerServer(s grpc.ServiceRegistrar, srv PuntManagerServer) {
	s.RegisterService(&PuntManager_ServiceDesc, srv)
}

func _PuntManager_UpdatePuntState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePuntStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuntManagerServer).UpdatePuntState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puntmgr.PuntManager/UpdatePuntState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuntManagerServer).UpdatePuntState(ctx, req.(*UpdatePuntStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PuntManager_ServiceDesc is the grpc.ServiceDesc for PuntManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PuntManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "puntmgr.PuntManager",
	HandlerType: (*PuntManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePuntState",
			Handler:    _PuntManager_UpdatePuntState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "puntmgr/puntmgr.proto",
}
