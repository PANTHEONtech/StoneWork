// SPDX-License-Identifier: Apache-2.0

// Copyright 2021 PANTHEON.tech
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: puntmgr/puntmgr.proto

package puntmgr

import (
	acl "go.ligato.io/vpp-agent/v3/proto/ligato/vpp/acl"
	punt "go.ligato.io/vpp-agent/v3/proto/ligato/vpp/punt"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Lifecycle of a punt.
type PuntState int32

const (
	// The state of the punt is not known.
	PuntState_UNKNOWN PuntState = 0
	// Punt is initialized (metadata are available) but not yet configured.
	PuntState_INIT PuntState = 1
	// Punt is configured between VPP and CNF/Linux.
	PuntState_CREATED PuntState = 2
	// Punt is removed and no longer available (including the metadata).
	PuntState_DELETED PuntState = 3
)

// Enum value maps for PuntState.
var (
	PuntState_name = map[int32]string{
		0: "UNKNOWN",
		1: "INIT",
		2: "CREATED",
		3: "DELETED",
	}
	PuntState_value = map[string]int32{
		"UNKNOWN": 0,
		"INIT":    1,
		"CREATED": 2,
		"DELETED": 3,
	}
)

func (x PuntState) Enum() *PuntState {
	p := new(PuntState)
	*p = x
	return p
}

func (x PuntState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PuntState) Descriptor() protoreflect.EnumDescriptor {
	return file_puntmgr_puntmgr_proto_enumTypes[0].Descriptor()
}

func (PuntState) Type() protoreflect.EnumType {
	return &file_puntmgr_puntmgr_proto_enumTypes[0]
}

func (x PuntState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PuntState.Descriptor instead.
func (PuntState) EnumDescriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0}
}

type PuntRequest_PuntType int32

const (
	// Punt is not required.
	PuntRequest_NO_PUNT PuntRequest_PuntType = 0
	// Create an L2 "hairpin x-connect" using TAPs or MEMIFs:
	//   vpp_interface1 <-> vpp tap/memif 1 <-> linux tap/memif 1 -- CNF -- linux tap/memif 2 <-> vpp tap/memif 2 <-> vpp_interface2
	// (i.e. hairpinning over linux network stack or via memif-enabled CNF)
	PuntRequest_HAIRPIN_XCONNECT PuntRequest_PuntType = 1
	// Like HAIRPIN x-connect except that while one side is attached to an existing L2 VPP interface, the other side
	// is created as memif or TAP with given attributes. Basically it is like a feature attached to VPP interface
	// (in the form of a new interface linked with an existing one, just like tunnel interfaces), which causes all
	// traffic arriving/leaving via that interface to also flow through a CNF/Linux network stack before
	// entering/exiting VPP. Unlike HAIRPIN x-connect it is therefore possible to attach further processing
	// to this traffic (x-connect just forwards it through VPP unprocessed).
	PuntRequest_HAIRPIN PuntRequest_PuntType = 2
	// Copy traffic arriving and/or leaving via L2/L3 interface and send it to Linux or memif-enabled CNF.
	PuntRequest_SPAN PuntRequest_PuntType = 3
	// Effectively replicate L3 VPP interface in Linux using ACL-based xConnect as follows:
	//   vpp-interface with IP  <-- ABX --> unnumbered vpp memif/tap interface <-> Linux Tap / CNF memif
	PuntRequest_ABX PuntRequest_PuntType = 4
	// Punt traffic matching given conditions (received through any interface) and punt it over a AF_UNIX socket.
	PuntRequest_PUNT_TO_SOCKET PuntRequest_PuntType = 5
	// Proxy DHCP requests for a given (L3) VRF into the Linux network stack or into a memif-enabled CNF.
	PuntRequest_DHCP_PROXY PuntRequest_PuntType = 6
	// Effectively replicate L3 VPP interface in Linux for ISIS protocol packets using xConnect as follows:
	//   vpp-interface with IP  <-- ISISX --> unnumbered vpp memif/tap interface <-> Linux Tap / CNF memif
	// Basically it has the same goal as ABX, but ABX can't be used for ISIS protocol packets as packets
	// for this protocol get dropped in VPP before reaching ACL VPP node.
	PuntRequest_ISISX PuntRequest_PuntType = 7
)

// Enum value maps for PuntRequest_PuntType.
var (
	PuntRequest_PuntType_name = map[int32]string{
		0: "NO_PUNT",
		1: "HAIRPIN_XCONNECT",
		2: "HAIRPIN",
		3: "SPAN",
		4: "ABX",
		5: "PUNT_TO_SOCKET",
		6: "DHCP_PROXY",
		7: "ISISX",
	}
	PuntRequest_PuntType_value = map[string]int32{
		"NO_PUNT":          0,
		"HAIRPIN_XCONNECT": 1,
		"HAIRPIN":          2,
		"SPAN":             3,
		"ABX":              4,
		"PUNT_TO_SOCKET":   5,
		"DHCP_PROXY":       6,
		"ISISX":            7,
	}
)

func (x PuntRequest_PuntType) Enum() *PuntRequest_PuntType {
	p := new(PuntRequest_PuntType)
	*p = x
	return p
}

func (x PuntRequest_PuntType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PuntRequest_PuntType) Descriptor() protoreflect.EnumDescriptor {
	return file_puntmgr_puntmgr_proto_enumTypes[1].Descriptor()
}

func (PuntRequest_PuntType) Type() protoreflect.EnumType {
	return &file_puntmgr_puntmgr_proto_enumTypes[1]
}

func (x PuntRequest_PuntType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PuntRequest_PuntType.Descriptor instead.
func (PuntRequest_PuntType) EnumDescriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 0}
}

// Type of the interconnection between VPP and Linux/CNF.
type PuntRequest_InterconnectType int32

const (
	// Interconnect VPP with the Linux network stack using TAP.
	PuntRequest_TAP PuntRequest_InterconnectType = 0
	// Interconnect VPP with a CNF using memif.
	PuntRequest_MEMIF PuntRequest_InterconnectType = 1
	// Exchange packets between VPP and a CNF over AF-UNIX socket.
	PuntRequest_AF_UNIX PuntRequest_InterconnectType = 2
)

// Enum value maps for PuntRequest_InterconnectType.
var (
	PuntRequest_InterconnectType_name = map[int32]string{
		0: "TAP",
		1: "MEMIF",
		2: "AF_UNIX",
	}
	PuntRequest_InterconnectType_value = map[string]int32{
		"TAP":     0,
		"MEMIF":   1,
		"AF_UNIX": 2,
	}
)

func (x PuntRequest_InterconnectType) Enum() *PuntRequest_InterconnectType {
	p := new(PuntRequest_InterconnectType)
	*p = x
	return p
}

func (x PuntRequest_InterconnectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PuntRequest_InterconnectType) Descriptor() protoreflect.EnumDescriptor {
	return file_puntmgr_puntmgr_proto_enumTypes[2].Descriptor()
}

func (PuntRequest_InterconnectType) Type() protoreflect.EnumType {
	return &file_puntmgr_puntmgr_proto_enumTypes[2]
}

func (x PuntRequest_InterconnectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PuntRequest_InterconnectType.Descriptor instead.
func (PuntRequest_InterconnectType) EnumDescriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 1}
}

type PuntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label identifies punt request among all the requests for a given configuration item (key-value pair).
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Ligato/VPP supports multiple ways of packet punting between VPP and a CNF.
	PuntType         PuntRequest_PuntType         `protobuf:"varint,2,opt,name=punt_type,json=puntType,proto3,enum=puntmgr.PuntRequest_PuntType" json:"punt_type,omitempty"`
	InterconnectType PuntRequest_InterconnectType `protobuf:"varint,3,opt,name=interconnect_type,json=interconnectType,proto3,enum=puntmgr.PuntRequest_InterconnectType" json:"interconnect_type,omitempty"`
	// Types that are assignable to Config:
	//	*PuntRequest_HairpinXConnect_
	//	*PuntRequest_Hairpin_
	//	*PuntRequest_Span_
	//	*PuntRequest_Abx_
	//	*PuntRequest_PuntToSocket_
	//	*PuntRequest_DhcpProxy_
	//	*PuntRequest_Isisx_
	Config isPuntRequest_Config `protobuf_oneof:"config"`
}

func (x *PuntRequest) Reset() {
	*x = PuntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest) ProtoMessage() {}

func (x *PuntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest.ProtoReflect.Descriptor instead.
func (*PuntRequest) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0}
}

func (x *PuntRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PuntRequest) GetPuntType() PuntRequest_PuntType {
	if x != nil {
		return x.PuntType
	}
	return PuntRequest_NO_PUNT
}

func (x *PuntRequest) GetInterconnectType() PuntRequest_InterconnectType {
	if x != nil {
		return x.InterconnectType
	}
	return PuntRequest_TAP
}

func (m *PuntRequest) GetConfig() isPuntRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *PuntRequest) GetHairpinXConnect() *PuntRequest_HairpinXConnect {
	if x, ok := x.GetConfig().(*PuntRequest_HairpinXConnect_); ok {
		return x.HairpinXConnect
	}
	return nil
}

func (x *PuntRequest) GetHairpin() *PuntRequest_Hairpin {
	if x, ok := x.GetConfig().(*PuntRequest_Hairpin_); ok {
		return x.Hairpin
	}
	return nil
}

func (x *PuntRequest) GetSpan() *PuntRequest_Span {
	if x, ok := x.GetConfig().(*PuntRequest_Span_); ok {
		return x.Span
	}
	return nil
}

func (x *PuntRequest) GetAbx() *PuntRequest_Abx {
	if x, ok := x.GetConfig().(*PuntRequest_Abx_); ok {
		return x.Abx
	}
	return nil
}

func (x *PuntRequest) GetPuntToSocket() *PuntRequest_PuntToSocket {
	if x, ok := x.GetConfig().(*PuntRequest_PuntToSocket_); ok {
		return x.PuntToSocket
	}
	return nil
}

func (x *PuntRequest) GetDhcpProxy() *PuntRequest_DhcpProxy {
	if x, ok := x.GetConfig().(*PuntRequest_DhcpProxy_); ok {
		return x.DhcpProxy
	}
	return nil
}

func (x *PuntRequest) GetIsisx() *PuntRequest_Isisx {
	if x, ok := x.GetConfig().(*PuntRequest_Isisx_); ok {
		return x.Isisx
	}
	return nil
}

type isPuntRequest_Config interface {
	isPuntRequest_Config()
}

type PuntRequest_HairpinXConnect_ struct {
	HairpinXConnect *PuntRequest_HairpinXConnect `protobuf:"bytes,10,opt,name=hairpinXConnect,proto3,oneof"`
}

type PuntRequest_Hairpin_ struct {
	Hairpin *PuntRequest_Hairpin `protobuf:"bytes,11,opt,name=hairpin,proto3,oneof"`
}

type PuntRequest_Span_ struct {
	Span *PuntRequest_Span `protobuf:"bytes,12,opt,name=span,proto3,oneof"`
}

type PuntRequest_Abx_ struct {
	Abx *PuntRequest_Abx `protobuf:"bytes,13,opt,name=abx,proto3,oneof"`
}

type PuntRequest_PuntToSocket_ struct {
	PuntToSocket *PuntRequest_PuntToSocket `protobuf:"bytes,14,opt,name=puntToSocket,proto3,oneof"`
}

type PuntRequest_DhcpProxy_ struct {
	DhcpProxy *PuntRequest_DhcpProxy `protobuf:"bytes,15,opt,name=dhcpProxy,proto3,oneof"`
}

type PuntRequest_Isisx_ struct {
	Isisx *PuntRequest_Isisx `protobuf:"bytes,16,opt,name=isisx,proto3,oneof"`
}

func (*PuntRequest_HairpinXConnect_) isPuntRequest_Config() {}

func (*PuntRequest_Hairpin_) isPuntRequest_Config() {}

func (*PuntRequest_Span_) isPuntRequest_Config() {}

func (*PuntRequest_Abx_) isPuntRequest_Config() {}

func (*PuntRequest_PuntToSocket_) isPuntRequest_Config() {}

func (*PuntRequest_DhcpProxy_) isPuntRequest_Config() {}

func (*PuntRequest_Isisx_) isPuntRequest_Config() {}

// A list of punt requests.
type PuntRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuntRequests []*PuntRequest `protobuf:"bytes,1,rep,name=punt_requests,json=puntRequests,proto3" json:"punt_requests,omitempty"`
}

func (x *PuntRequests) Reset() {
	*x = PuntRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequests) ProtoMessage() {}

func (x *PuntRequests) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequests.ProtoReflect.Descriptor instead.
func (*PuntRequests) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{1}
}

func (x *PuntRequests) GetPuntRequests() []*PuntRequest {
	if x != nil {
		return x.PuntRequests
	}
	return nil
}

// Unique identifier for a punt instance.
type PuntID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Microservice label of the CNF with which the packet punting is established.
	CnfMsLabel string `protobuf:"bytes,1,opt,name=cnf_ms_label,json=cnfMsLabel,proto3" json:"cnf_ms_label,omitempty"`
	// Key of the configuration item for which this punt has been created.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// With multiple punt requests for a single key, labels are used to distinguish between them.
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *PuntID) Reset() {
	*x = PuntID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntID) ProtoMessage() {}

func (x *PuntID) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntID.ProtoReflect.Descriptor instead.
func (*PuntID) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{2}
}

func (x *PuntID) GetCnfMsLabel() string {
	if x != nil {
		return x.CnfMsLabel
	}
	return ""
}

func (x *PuntID) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PuntID) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// Metadata associated with a configured packet punting.
type PuntMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *PuntID                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interconnects []*PuntMetadata_Interconnect `protobuf:"bytes,2,rep,name=interconnects,proto3" json:"interconnects,omitempty"`
}

func (x *PuntMetadata) Reset() {
	*x = PuntMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntMetadata) ProtoMessage() {}

func (x *PuntMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntMetadata.ProtoReflect.Descriptor instead.
func (*PuntMetadata) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{3}
}

func (x *PuntMetadata) GetId() *PuntID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PuntMetadata) GetInterconnects() []*PuntMetadata_Interconnect {
	if x != nil {
		return x.Interconnects
	}
	return nil
}

// UpdatePuntStateReq encapsulates input arguments to UpdatePuntState gRPC.
type UpdatePuntStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *PuntMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	State    PuntState     `protobuf:"varint,2,opt,name=state,proto3,enum=puntmgr.PuntState" json:"state,omitempty"`
}

func (x *UpdatePuntStateReq) Reset() {
	*x = UpdatePuntStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePuntStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePuntStateReq) ProtoMessage() {}

func (x *UpdatePuntStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePuntStateReq.ProtoReflect.Descriptor instead.
func (*UpdatePuntStateReq) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePuntStateReq) GetMetadata() *PuntMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdatePuntStateReq) GetState() PuntState {
	if x != nil {
		return x.State
	}
	return PuntState_UNKNOWN
}

// UpdatePuntStateResp is empty. UpdatePuntState returns only SUCCESS/FAILURE.
type UpdatePuntStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePuntStateResp) Reset() {
	*x = UpdatePuntStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePuntStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePuntStateResp) ProtoMessage() {}

func (x *UpdatePuntStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePuntStateResp.ProtoReflect.Descriptor instead.
func (*UpdatePuntStateResp) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{5}
}

// Type-specific configuration to use for the punt.
type PuntRequest_HairpinXConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VppInterface1 string `protobuf:"bytes,1,opt,name=vpp_interface1,json=vppInterface1,proto3" json:"vpp_interface1,omitempty"`
	VppInterface2 string `protobuf:"bytes,2,opt,name=vpp_interface2,json=vppInterface2,proto3" json:"vpp_interface2,omitempty"`
}

func (x *PuntRequest_HairpinXConnect) Reset() {
	*x = PuntRequest_HairpinXConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_HairpinXConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_HairpinXConnect) ProtoMessage() {}

func (x *PuntRequest_HairpinXConnect) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_HairpinXConnect.ProtoReflect.Descriptor instead.
func (*PuntRequest_HairpinXConnect) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PuntRequest_HairpinXConnect) GetVppInterface1() string {
	if x != nil {
		return x.VppInterface1
	}
	return ""
}

func (x *PuntRequest_HairpinXConnect) GetVppInterface2() string {
	if x != nil {
		return x.VppInterface2
	}
	return ""
}

type PuntRequest_Hairpin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Existing VPP interface that will have its traffic hairpinned over CNF/Linux.
	VppInterface string `protobuf:"bytes,1,opt,name=vpp_interface,json=vppInterface,proto3" json:"vpp_interface,omitempty"`
	// Newly created TAP/memif interface adding "hairpin" feature to an existing VPP interface.
	HairpinInterface *PuntRequest_Hairpin_Interface `protobuf:"bytes,2,opt,name=hairpin_interface,json=hairpinInterface,proto3" json:"hairpin_interface,omitempty"`
}

func (x *PuntRequest_Hairpin) Reset() {
	*x = PuntRequest_Hairpin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_Hairpin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_Hairpin) ProtoMessage() {}

func (x *PuntRequest_Hairpin) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_Hairpin.ProtoReflect.Descriptor instead.
func (*PuntRequest_Hairpin) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PuntRequest_Hairpin) GetVppInterface() string {
	if x != nil {
		return x.VppInterface
	}
	return ""
}

func (x *PuntRequest_Hairpin) GetHairpinInterface() *PuntRequest_Hairpin_Interface {
	if x != nil {
		return x.HairpinInterface
	}
	return nil
}

type PuntRequest_Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VppInterface string `protobuf:"bytes,1,opt,name=vpp_interface,json=vppInterface,proto3" json:"vpp_interface,omitempty"`
}

func (x *PuntRequest_Span) Reset() {
	*x = PuntRequest_Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_Span) ProtoMessage() {}

func (x *PuntRequest_Span) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_Span.ProtoReflect.Descriptor instead.
func (*PuntRequest_Span) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PuntRequest_Span) GetVppInterface() string {
	if x != nil {
		return x.VppInterface
	}
	return ""
}

type PuntRequest_Abx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VppInterface string `protobuf:"bytes,1,opt,name=vpp_interface,json=vppInterface,proto3" json:"vpp_interface,omitempty"`
	// VPP interface is expected to be inside this VRF.
	// Punt will not be configured until this dependency is satisfied.
	Vrf uint32 `protobuf:"varint,2,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Enable if VRF is not used on the CNF side.
	WithoutCnfVrf bool `protobuf:"varint,3,opt,name=without_cnf_vrf,json=withoutCnfVrf,proto3" json:"without_cnf_vrf,omitempty"`
	// DestinationNetwork and SourceNetwork are allowed to contain special constants:
	//  - "any": match any source/destination IPv4/IPv6 address
	//  - "" (empty string): same as "any"
	//  - "local": match traffic destined to one of the IP addresses assigned to vpp_interface
	IngressAclRules []*acl.ACL_Rule_IpRule `protobuf:"bytes,4,rep,name=ingress_acl_rules,json=ingressAclRules,proto3" json:"ingress_acl_rules,omitempty"`
	EgressAclRules  []*acl.ACL_Rule_IpRule `protobuf:"bytes,5,rep,name=egress_acl_rules,json=egressAclRules,proto3" json:"egress_acl_rules,omitempty"`
}

func (x *PuntRequest_Abx) Reset() {
	*x = PuntRequest_Abx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_Abx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_Abx) ProtoMessage() {}

func (x *PuntRequest_Abx) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_Abx.ProtoReflect.Descriptor instead.
func (*PuntRequest_Abx) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PuntRequest_Abx) GetVppInterface() string {
	if x != nil {
		return x.VppInterface
	}
	return ""
}

func (x *PuntRequest_Abx) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *PuntRequest_Abx) GetWithoutCnfVrf() bool {
	if x != nil {
		return x.WithoutCnfVrf
	}
	return false
}

func (x *PuntRequest_Abx) GetIngressAclRules() []*acl.ACL_Rule_IpRule {
	if x != nil {
		return x.IngressAclRules
	}
	return nil
}

func (x *PuntRequest_Abx) GetEgressAclRules() []*acl.ACL_Rule_IpRule {
	if x != nil {
		return x.EgressAclRules
	}
	return nil
}

type PuntRequest_PuntToSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//	*PuntRequest_PuntToSocket_ToHost
	//	*PuntRequest_PuntToSocket_Exception
	Config isPuntRequest_PuntToSocket_Config `protobuf_oneof:"config"`
}

func (x *PuntRequest_PuntToSocket) Reset() {
	*x = PuntRequest_PuntToSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_PuntToSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_PuntToSocket) ProtoMessage() {}

func (x *PuntRequest_PuntToSocket) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_PuntToSocket.ProtoReflect.Descriptor instead.
func (*PuntRequest_PuntToSocket) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 4}
}

func (m *PuntRequest_PuntToSocket) GetConfig() isPuntRequest_PuntToSocket_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *PuntRequest_PuntToSocket) GetToHost() *punt.ToHost {
	if x, ok := x.GetConfig().(*PuntRequest_PuntToSocket_ToHost); ok {
		return x.ToHost
	}
	return nil
}

func (x *PuntRequest_PuntToSocket) GetException() *punt.Exception {
	if x, ok := x.GetConfig().(*PuntRequest_PuntToSocket_Exception); ok {
		return x.Exception
	}
	return nil
}

type isPuntRequest_PuntToSocket_Config interface {
	isPuntRequest_PuntToSocket_Config()
}

type PuntRequest_PuntToSocket_ToHost struct {
	ToHost *punt.ToHost `protobuf:"bytes,1,opt,name=toHost,proto3,oneof"`
}

type PuntRequest_PuntToSocket_Exception struct {
	Exception *punt.Exception `protobuf:"bytes,2,opt,name=exception,proto3,oneof"`
}

func (*PuntRequest_PuntToSocket_ToHost) isPuntRequest_PuntToSocket_Config() {}

func (*PuntRequest_PuntToSocket_Exception) isPuntRequest_PuntToSocket_Config() {}

type PuntRequest_DhcpProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vrf uint32 `protobuf:"varint,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Enable if VRF is not used on the CNF side.
	WithoutCnfVrf bool `protobuf:"varint,3,opt,name=without_cnf_vrf,json=withoutCnfVrf,proto3" json:"without_cnf_vrf,omitempty"`
}

func (x *PuntRequest_DhcpProxy) Reset() {
	*x = PuntRequest_DhcpProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_DhcpProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_DhcpProxy) ProtoMessage() {}

func (x *PuntRequest_DhcpProxy) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_DhcpProxy.ProtoReflect.Descriptor instead.
func (*PuntRequest_DhcpProxy) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PuntRequest_DhcpProxy) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *PuntRequest_DhcpProxy) GetWithoutCnfVrf() bool {
	if x != nil {
		return x.WithoutCnfVrf
	}
	return false
}

type PuntRequest_Isisx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface in VPP that is used to communicate ISIS protocol packets with outside world.
	// This interface gets by this configuration ISIS enabled.
	VppInterface string `protobuf:"bytes,1,opt,name=vpp_interface,json=vppInterface,proto3" json:"vpp_interface,omitempty"`
	// VPP interface is expected to be inside this VRF.
	// Punt will not be configured until this dependency is satisfied.
	Vrf uint32 `protobuf:"varint,2,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Enable if VRF is not used on the CNF side.
	WithoutCnfVrf bool `protobuf:"varint,3,opt,name=without_cnf_vrf,json=withoutCnfVrf,proto3" json:"without_cnf_vrf,omitempty"`
}

func (x *PuntRequest_Isisx) Reset() {
	*x = PuntRequest_Isisx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_Isisx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_Isisx) ProtoMessage() {}

func (x *PuntRequest_Isisx) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_Isisx.ProtoReflect.Descriptor instead.
func (*PuntRequest_Isisx) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PuntRequest_Isisx) GetVppInterface() string {
	if x != nil {
		return x.VppInterface
	}
	return ""
}

func (x *PuntRequest_Isisx) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *PuntRequest_Isisx) GetWithoutCnfVrf() bool {
	if x != nil {
		return x.WithoutCnfVrf
	}
	return false
}

type PuntRequest_Hairpin_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical name of the newly created VPP interface.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// PhysAddress represents physical address (MAC) of the interface.
	// Random address will be assigned if left empty.
	PhysAddress string `protobuf:"bytes,2,opt,name=phys_address,json=physAddress,proto3" json:"phys_address,omitempty"`
	// IPAddresses define list of IP addresses for the interface and must be
	// defined in the following format: <ipAddress>/<ipPrefix>.
	IpAddresses []string `protobuf:"bytes,3,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// ID of VRF table that the interface is assigned to.
	Vrf uint32 `protobuf:"varint,4,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Enable DHCP client on interface.
	WithDhcpClient bool `protobuf:"varint,5,opt,name=with_dhcp_client,json=withDhcpClient,proto3" json:"with_dhcp_client,omitempty"`
	// Maximum transmission unit.
	Mtu uint32 `protobuf:"varint,6,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *PuntRequest_Hairpin_Interface) Reset() {
	*x = PuntRequest_Hairpin_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntRequest_Hairpin_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntRequest_Hairpin_Interface) ProtoMessage() {}

func (x *PuntRequest_Hairpin_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntRequest_Hairpin_Interface.ProtoReflect.Descriptor instead.
func (*PuntRequest_Hairpin_Interface) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *PuntRequest_Hairpin_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PuntRequest_Hairpin_Interface) GetPhysAddress() string {
	if x != nil {
		return x.PhysAddress
	}
	return ""
}

func (x *PuntRequest_Hairpin_Interface) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *PuntRequest_Hairpin_Interface) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *PuntRequest_Hairpin_Interface) GetWithDhcpClient() bool {
	if x != nil {
		return x.WithDhcpClient
	}
	return false
}

func (x *PuntRequest_Hairpin_Interface) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

// VPP or CNF interface metadata.
type PuntMetadata_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For Linux interface the host name is the same as the logical one.
	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PhysAddress string   `protobuf:"bytes,2,opt,name=phys_address,json=physAddress,proto3" json:"phys_address,omitempty"`
	IpAddresses []string `protobuf:"bytes,3,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	VrfRT       uint32   `protobuf:"varint,4,opt,name=vrfRT,proto3" json:"vrfRT,omitempty"`
	VrfName     string   `protobuf:"bytes,5,opt,name=vrfName,proto3" json:"vrfName,omitempty"` // not used in VPP
}

func (x *PuntMetadata_Interface) Reset() {
	*x = PuntMetadata_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntMetadata_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntMetadata_Interface) ProtoMessage() {}

func (x *PuntMetadata_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntMetadata_Interface.ProtoReflect.Descriptor instead.
func (*PuntMetadata_Interface) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PuntMetadata_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PuntMetadata_Interface) GetPhysAddress() string {
	if x != nil {
		return x.PhysAddress
	}
	return ""
}

func (x *PuntMetadata_Interface) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *PuntMetadata_Interface) GetVrfRT() uint32 {
	if x != nil {
		return x.VrfRT
	}
	return 0
}

func (x *PuntMetadata_Interface) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type PuntMetadata_InterconnectID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What/where packets are punted on the VPP side using this interconnect.
	// Each punt handler (there is one for each PuntRequest.Type) defines its own selectors.
	VppSelector string `protobuf:"bytes,1,opt,name=vpp_selector,json=vppSelector,proto3" json:"vpp_selector,omitempty"`
	// What/where packets are punted on the CNF side using this interconnect.
	// Generated by PuntManager. Outside manager only useful in combination with vpp_selector to obtain
	// unique id for the interconnect.
	CnfSelector string `protobuf:"bytes,2,opt,name=cnf_selector,json=cnfSelector,proto3" json:"cnf_selector,omitempty"`
}

func (x *PuntMetadata_InterconnectID) Reset() {
	*x = PuntMetadata_InterconnectID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntMetadata_InterconnectID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntMetadata_InterconnectID) ProtoMessage() {}

func (x *PuntMetadata_InterconnectID) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntMetadata_InterconnectID.ProtoReflect.Descriptor instead.
func (*PuntMetadata_InterconnectID) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{3, 1}
}

func (x *PuntMetadata_InterconnectID) GetVppSelector() string {
	if x != nil {
		return x.VppSelector
	}
	return ""
}

func (x *PuntMetadata_InterconnectID) GetCnfSelector() string {
	if x != nil {
		return x.CnfSelector
	}
	return ""
}

// Interface based VPP<->CNF interconnects.
// Not used with PUNT_TO_SOCKET.
type PuntMetadata_Interconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *PuntMetadata_InterconnectID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// VPP side of the interconnect.
	// Nil for interconnect based on AF-UNIX socket.
	VppInterface *PuntMetadata_Interface `protobuf:"bytes,2,opt,name=vpp_interface,json=vppInterface,proto3" json:"vpp_interface,omitempty"`
	// CNF/Linux side of the interconnect.
	// Nil for interconnect based on AF-UNIX socket.
	CnfInterface *PuntMetadata_Interface `protobuf:"bytes,3,opt,name=cnf_interface,json=cnfInterface,proto3" json:"cnf_interface,omitempty"`
	// Enabled if more than one punt is using this interconnect.
	Shared bool `protobuf:"varint,4,opt,name=shared,proto3" json:"shared,omitempty"`
}

func (x *PuntMetadata_Interconnect) Reset() {
	*x = PuntMetadata_Interconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_puntmgr_puntmgr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuntMetadata_Interconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuntMetadata_Interconnect) ProtoMessage() {}

func (x *PuntMetadata_Interconnect) ProtoReflect() protoreflect.Message {
	mi := &file_puntmgr_puntmgr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuntMetadata_Interconnect.ProtoReflect.Descriptor instead.
func (*PuntMetadata_Interconnect) Descriptor() ([]byte, []int) {
	return file_puntmgr_puntmgr_proto_rawDescGZIP(), []int{3, 2}
}

func (x *PuntMetadata_Interconnect) GetId() *PuntMetadata_InterconnectID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PuntMetadata_Interconnect) GetVppInterface() *PuntMetadata_Interface {
	if x != nil {
		return x.VppInterface
	}
	return nil
}

func (x *PuntMetadata_Interconnect) GetCnfInterface() *PuntMetadata_Interface {
	if x != nil {
		return x.CnfInterface
	}
	return nil
}

func (x *PuntMetadata_Interconnect) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

var File_puntmgr_puntmgr_proto protoreflect.FileDescriptor

var file_puntmgr_puntmgr_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2f, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72,
	0x1a, 0x18, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x70, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x0e, 0x0a, 0x0b, 0x50, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x09,
	0x70, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x70, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0f,
	0x68, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x58, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e,
	0x50, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x61, 0x69, 0x72,
	0x70, 0x69, 0x6e, 0x58, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x68,
	0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x58, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x68, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x68, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72,
	0x2e, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x62, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72,
	0x2e, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x62, 0x78,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x62, 0x78, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x3e, 0x0a, 0x09, 0x64, 0x68, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x48, 0x00, 0x52, 0x09, 0x64, 0x68, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x69, 0x73, 0x69, 0x73, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x73, 0x69, 0x73, 0x78, 0x1a, 0x5f, 0x0a, 0x0f, 0x48, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x58,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x70, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x76, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x31, 0x12, 0x25,
	0x0a, 0x0e, 0x76, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x32, 0x1a, 0xb9, 0x02, 0x0a, 0x07, 0x48, 0x61, 0x69, 0x72, 0x70, 0x69,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x70, 0x70, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x68, 0x61, 0x69, 0x72, 0x70, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x61, 0x69, 0x72, 0x70, 0x69, 0x6e, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x68, 0x61, 0x69, 0x72, 0x70,
	0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x09,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x79, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x1a, 0x2b, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x70, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xfc,
	0x01, 0x0a, 0x03, 0x41, 0x62, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x70, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x72, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6e, 0x66, 0x5f, 0x76, 0x72, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43,
	0x6e, 0x66, 0x56, 0x72, 0x66, 0x12, 0x4b, 0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63,
	0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x87, 0x01,
	0x0a, 0x0c, 0x50, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x70, 0x75, 0x6e, 0x74,
	0x2e, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x45, 0x0a, 0x09, 0x44, 0x68, 0x63, 0x70, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6e, 0x66, 0x5f, 0x76, 0x72, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6e, 0x66, 0x56, 0x72, 0x66, 0x1a, 0x66,
	0x0a, 0x05, 0x49, 0x73, 0x69, 0x73, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x70, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x72, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6e, 0x66, 0x5f, 0x76, 0x72,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x43, 0x6e, 0x66, 0x56, 0x72, 0x66, 0x22, 0x7c, 0x0a, 0x08, 0x50, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x50, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x41, 0x49, 0x52, 0x50, 0x49, 0x4e, 0x5f, 0x58, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x49, 0x52, 0x50, 0x49, 0x4e,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x42, 0x58, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x53, 0x49,
	0x53, 0x58, 0x10, 0x07, 0x22, 0x33, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x50, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x4d, 0x49, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x49, 0x0a, 0x0c, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x75, 0x6e,
	0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0c, 0x70, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x52,
	0x0a, 0x06, 0x50, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6e, 0x66, 0x5f,
	0x6d, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6e, 0x66, 0x4d, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x22, 0xd4, 0x04, 0x0a, 0x0c, 0x50, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x75,
	0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x95,
	0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x72, 0x66, 0x52, 0x54, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x52, 0x54, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x56, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x70, 0x70, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x70, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6e, 0x66, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6e, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xe8,
	0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x75,
	0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x76,
	0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x6e, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x6e, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x2a, 0x3c, 0x0a, 0x09, 0x50, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x32, 0x5b, 0x0a, 0x0b, 0x50, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42, 0x32,
	0x5a, 0x30, 0x67, 0x6f, 0x2e, 0x70, 0x61, 0x6e, 0x74, 0x68, 0x65, 0x6f, 0x6e, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x75, 0x6e, 0x74, 0x6d, 0x67, 0x72, 0x3b, 0x70, 0x75, 0x6e, 0x74, 0x6d,
	0x67, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_puntmgr_puntmgr_proto_rawDescOnce sync.Once
	file_puntmgr_puntmgr_proto_rawDescData = file_puntmgr_puntmgr_proto_rawDesc
)

func file_puntmgr_puntmgr_proto_rawDescGZIP() []byte {
	file_puntmgr_puntmgr_proto_rawDescOnce.Do(func() {
		file_puntmgr_puntmgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_puntmgr_puntmgr_proto_rawDescData)
	})
	return file_puntmgr_puntmgr_proto_rawDescData
}

var file_puntmgr_puntmgr_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_puntmgr_puntmgr_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_puntmgr_puntmgr_proto_goTypes = []interface{}{
	(PuntState)(0),                        // 0: puntmgr.PuntState
	(PuntRequest_PuntType)(0),             // 1: puntmgr.PuntRequest.PuntType
	(PuntRequest_InterconnectType)(0),     // 2: puntmgr.PuntRequest.InterconnectType
	(*PuntRequest)(nil),                   // 3: puntmgr.PuntRequest
	(*PuntRequests)(nil),                  // 4: puntmgr.PuntRequests
	(*PuntID)(nil),                        // 5: puntmgr.PuntID
	(*PuntMetadata)(nil),                  // 6: puntmgr.PuntMetadata
	(*UpdatePuntStateReq)(nil),            // 7: puntmgr.UpdatePuntStateReq
	(*UpdatePuntStateResp)(nil),           // 8: puntmgr.UpdatePuntStateResp
	(*PuntRequest_HairpinXConnect)(nil),   // 9: puntmgr.PuntRequest.HairpinXConnect
	(*PuntRequest_Hairpin)(nil),           // 10: puntmgr.PuntRequest.Hairpin
	(*PuntRequest_Span)(nil),              // 11: puntmgr.PuntRequest.Span
	(*PuntRequest_Abx)(nil),               // 12: puntmgr.PuntRequest.Abx
	(*PuntRequest_PuntToSocket)(nil),      // 13: puntmgr.PuntRequest.PuntToSocket
	(*PuntRequest_DhcpProxy)(nil),         // 14: puntmgr.PuntRequest.DhcpProxy
	(*PuntRequest_Isisx)(nil),             // 15: puntmgr.PuntRequest.Isisx
	(*PuntRequest_Hairpin_Interface)(nil), // 16: puntmgr.PuntRequest.Hairpin.Interface
	(*PuntMetadata_Interface)(nil),        // 17: puntmgr.PuntMetadata.Interface
	(*PuntMetadata_InterconnectID)(nil),   // 18: puntmgr.PuntMetadata.InterconnectID
	(*PuntMetadata_Interconnect)(nil),     // 19: puntmgr.PuntMetadata.Interconnect
	(*acl.ACL_Rule_IpRule)(nil),           // 20: ligato.vpp.acl.ACL.Rule.IpRule
	(*punt.ToHost)(nil),                   // 21: ligato.vpp.punt.ToHost
	(*punt.Exception)(nil),                // 22: ligato.vpp.punt.Exception
}
var file_puntmgr_puntmgr_proto_depIdxs = []int32{
	1,  // 0: puntmgr.PuntRequest.punt_type:type_name -> puntmgr.PuntRequest.PuntType
	2,  // 1: puntmgr.PuntRequest.interconnect_type:type_name -> puntmgr.PuntRequest.InterconnectType
	9,  // 2: puntmgr.PuntRequest.hairpinXConnect:type_name -> puntmgr.PuntRequest.HairpinXConnect
	10, // 3: puntmgr.PuntRequest.hairpin:type_name -> puntmgr.PuntRequest.Hairpin
	11, // 4: puntmgr.PuntRequest.span:type_name -> puntmgr.PuntRequest.Span
	12, // 5: puntmgr.PuntRequest.abx:type_name -> puntmgr.PuntRequest.Abx
	13, // 6: puntmgr.PuntRequest.puntToSocket:type_name -> puntmgr.PuntRequest.PuntToSocket
	14, // 7: puntmgr.PuntRequest.dhcpProxy:type_name -> puntmgr.PuntRequest.DhcpProxy
	15, // 8: puntmgr.PuntRequest.isisx:type_name -> puntmgr.PuntRequest.Isisx
	3,  // 9: puntmgr.PuntRequests.punt_requests:type_name -> puntmgr.PuntRequest
	5,  // 10: puntmgr.PuntMetadata.id:type_name -> puntmgr.PuntID
	19, // 11: puntmgr.PuntMetadata.interconnects:type_name -> puntmgr.PuntMetadata.Interconnect
	6,  // 12: puntmgr.UpdatePuntStateReq.metadata:type_name -> puntmgr.PuntMetadata
	0,  // 13: puntmgr.UpdatePuntStateReq.state:type_name -> puntmgr.PuntState
	16, // 14: puntmgr.PuntRequest.Hairpin.hairpin_interface:type_name -> puntmgr.PuntRequest.Hairpin.Interface
	20, // 15: puntmgr.PuntRequest.Abx.ingress_acl_rules:type_name -> ligato.vpp.acl.ACL.Rule.IpRule
	20, // 16: puntmgr.PuntRequest.Abx.egress_acl_rules:type_name -> ligato.vpp.acl.ACL.Rule.IpRule
	21, // 17: puntmgr.PuntRequest.PuntToSocket.toHost:type_name -> ligato.vpp.punt.ToHost
	22, // 18: puntmgr.PuntRequest.PuntToSocket.exception:type_name -> ligato.vpp.punt.Exception
	18, // 19: puntmgr.PuntMetadata.Interconnect.id:type_name -> puntmgr.PuntMetadata.InterconnectID
	17, // 20: puntmgr.PuntMetadata.Interconnect.vpp_interface:type_name -> puntmgr.PuntMetadata.Interface
	17, // 21: puntmgr.PuntMetadata.Interconnect.cnf_interface:type_name -> puntmgr.PuntMetadata.Interface
	7,  // 22: puntmgr.PuntManager.UpdatePuntState:input_type -> puntmgr.UpdatePuntStateReq
	8,  // 23: puntmgr.PuntManager.UpdatePuntState:output_type -> puntmgr.UpdatePuntStateResp
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_puntmgr_puntmgr_proto_init() }
func file_puntmgr_puntmgr_proto_init() {
	if File_puntmgr_puntmgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_puntmgr_puntmgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePuntStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePuntStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_HairpinXConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_Hairpin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_Abx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_PuntToSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_DhcpProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_Isisx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntRequest_Hairpin_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntMetadata_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntMetadata_InterconnectID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_puntmgr_puntmgr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuntMetadata_Interconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_puntmgr_puntmgr_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PuntRequest_HairpinXConnect_)(nil),
		(*PuntRequest_Hairpin_)(nil),
		(*PuntRequest_Span_)(nil),
		(*PuntRequest_Abx_)(nil),
		(*PuntRequest_PuntToSocket_)(nil),
		(*PuntRequest_DhcpProxy_)(nil),
		(*PuntRequest_Isisx_)(nil),
	}
	file_puntmgr_puntmgr_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*PuntRequest_PuntToSocket_ToHost)(nil),
		(*PuntRequest_PuntToSocket_Exception)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_puntmgr_puntmgr_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_puntmgr_puntmgr_proto_goTypes,
		DependencyIndexes: file_puntmgr_puntmgr_proto_depIdxs,
		EnumInfos:         file_puntmgr_puntmgr_proto_enumTypes,
		MessageInfos:      file_puntmgr_puntmgr_proto_msgTypes,
	}.Build()
	File_puntmgr_puntmgr_proto = out.File
	file_puntmgr_puntmgr_proto_rawDesc = nil
	file_puntmgr_puntmgr_proto_goTypes = nil
	file_puntmgr_puntmgr_proto_depIdxs = nil
}
