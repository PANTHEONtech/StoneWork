// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.13.0
// source: bgp/bgp.proto

package bgp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddressFamily_Afi int32

const (
	AddressFamily_AFI_UNKNOWN AddressFamily_Afi = 0
	AddressFamily_AFI_IP      AddressFamily_Afi = 1
	AddressFamily_AFI_IP6     AddressFamily_Afi = 2
	AddressFamily_AFI_L2VPN   AddressFamily_Afi = 25
	AddressFamily_AFI_LS      AddressFamily_Afi = 16388
	AddressFamily_AFI_OPAQUE  AddressFamily_Afi = 16397
)

// Enum value maps for AddressFamily_Afi.
var (
	AddressFamily_Afi_name = map[int32]string{
		0:     "AFI_UNKNOWN",
		1:     "AFI_IP",
		2:     "AFI_IP6",
		25:    "AFI_L2VPN",
		16388: "AFI_LS",
		16397: "AFI_OPAQUE",
	}
	AddressFamily_Afi_value = map[string]int32{
		"AFI_UNKNOWN": 0,
		"AFI_IP":      1,
		"AFI_IP6":     2,
		"AFI_L2VPN":   25,
		"AFI_LS":      16388,
		"AFI_OPAQUE":  16397,
	}
)

func (x AddressFamily_Afi) Enum() *AddressFamily_Afi {
	p := new(AddressFamily_Afi)
	*p = x
	return p
}

func (x AddressFamily_Afi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressFamily_Afi) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_bgp_proto_enumTypes[0].Descriptor()
}

func (AddressFamily_Afi) Type() protoreflect.EnumType {
	return &file_bgp_bgp_proto_enumTypes[0]
}

func (x AddressFamily_Afi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressFamily_Afi.Descriptor instead.
func (AddressFamily_Afi) EnumDescriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{0, 0}
}

type AddressFamily_Safi int32

const (
	AddressFamily_SAFI_UNKNOWN                  AddressFamily_Safi = 0
	AddressFamily_SAFI_UNICAST                  AddressFamily_Safi = 1
	AddressFamily_SAFI_MULTICAST                AddressFamily_Safi = 2
	AddressFamily_SAFI_MPLS_LABEL               AddressFamily_Safi = 4
	AddressFamily_SAFI_ENCAPSULATION            AddressFamily_Safi = 7
	AddressFamily_SAFI_VPLS                     AddressFamily_Safi = 65
	AddressFamily_SAFI_EVPN                     AddressFamily_Safi = 70
	AddressFamily_SAFI_LS                       AddressFamily_Safi = 71
	AddressFamily_SAFI_MPLS_VPN                 AddressFamily_Safi = 128
	AddressFamily_SAFI_MPLS_VPN_MULTICAST       AddressFamily_Safi = 129
	AddressFamily_SAFI_ROUTE_TARGET_CONSTRAINTS AddressFamily_Safi = 132
	AddressFamily_SAFI_FLOW_SPEC_UNICAST        AddressFamily_Safi = 133
	AddressFamily_SAFI_FLOW_SPEC_VPN            AddressFamily_Safi = 134
	AddressFamily_SAFI_KEY_VALUE                AddressFamily_Safi = 241
)

// Enum value maps for AddressFamily_Safi.
var (
	AddressFamily_Safi_name = map[int32]string{
		0:   "SAFI_UNKNOWN",
		1:   "SAFI_UNICAST",
		2:   "SAFI_MULTICAST",
		4:   "SAFI_MPLS_LABEL",
		7:   "SAFI_ENCAPSULATION",
		65:  "SAFI_VPLS",
		70:  "SAFI_EVPN",
		71:  "SAFI_LS",
		128: "SAFI_MPLS_VPN",
		129: "SAFI_MPLS_VPN_MULTICAST",
		132: "SAFI_ROUTE_TARGET_CONSTRAINTS",
		133: "SAFI_FLOW_SPEC_UNICAST",
		134: "SAFI_FLOW_SPEC_VPN",
		241: "SAFI_KEY_VALUE",
	}
	AddressFamily_Safi_value = map[string]int32{
		"SAFI_UNKNOWN":                  0,
		"SAFI_UNICAST":                  1,
		"SAFI_MULTICAST":                2,
		"SAFI_MPLS_LABEL":               4,
		"SAFI_ENCAPSULATION":            7,
		"SAFI_VPLS":                     65,
		"SAFI_EVPN":                     70,
		"SAFI_LS":                       71,
		"SAFI_MPLS_VPN":                 128,
		"SAFI_MPLS_VPN_MULTICAST":       129,
		"SAFI_ROUTE_TARGET_CONSTRAINTS": 132,
		"SAFI_FLOW_SPEC_UNICAST":        133,
		"SAFI_FLOW_SPEC_VPN":            134,
		"SAFI_KEY_VALUE":                241,
	}
)

func (x AddressFamily_Safi) Enum() *AddressFamily_Safi {
	p := new(AddressFamily_Safi)
	*p = x
	return p
}

func (x AddressFamily_Safi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressFamily_Safi) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_bgp_proto_enumTypes[1].Descriptor()
}

func (AddressFamily_Safi) Type() protoreflect.EnumType {
	return &file_bgp_bgp_proto_enumTypes[1]
}

func (x AddressFamily_Safi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressFamily_Safi.Descriptor instead.
func (AddressFamily_Safi) EnumDescriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{0, 1}
}

type Policy_Entry_Direction int32

const (
	Policy_Entry_IMPORT Policy_Entry_Direction = 0
	Policy_Entry_EXPORT Policy_Entry_Direction = 1
)

// Enum value maps for Policy_Entry_Direction.
var (
	Policy_Entry_Direction_name = map[int32]string{
		0: "IMPORT",
		1: "EXPORT",
	}
	Policy_Entry_Direction_value = map[string]int32{
		"IMPORT": 0,
		"EXPORT": 1,
	}
)

func (x Policy_Entry_Direction) Enum() *Policy_Entry_Direction {
	p := new(Policy_Entry_Direction)
	*p = x
	return p
}

func (x Policy_Entry_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Entry_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_bgp_proto_enumTypes[2].Descriptor()
}

func (Policy_Entry_Direction) Type() protoreflect.EnumType {
	return &file_bgp_bgp_proto_enumTypes[2]
}

func (x Policy_Entry_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_Entry_Direction.Descriptor instead.
func (Policy_Entry_Direction) EnumDescriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{4, 0, 0}
}

// Address Family.
type AddressFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Afi  AddressFamily_Afi  `protobuf:"varint,1,opt,name=afi,proto3,enum=bgp.AddressFamily_Afi" json:"afi,omitempty"`
	Safi AddressFamily_Safi `protobuf:"varint,2,opt,name=safi,proto3,enum=bgp.AddressFamily_Safi" json:"safi,omitempty"`
}

func (x *AddressFamily) Reset() {
	*x = AddressFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressFamily) ProtoMessage() {}

func (x *AddressFamily) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressFamily.ProtoReflect.Descriptor instead.
func (*AddressFamily) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *AddressFamily) GetAfi() AddressFamily_Afi {
	if x != nil {
		return x.Afi
	}
	return AddressFamily_AFI_UNKNOWN
}

func (x *AddressFamily) GetSafi() AddressFamily_Safi {
	if x != nil {
		return x.Safi
	}
	return AddressFamily_SAFI_UNKNOWN
}

type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Autonomous system number.
	Asn   uint32 `protobuf:"varint,2,opt,name=asn,proto3" json:"asn,omitempty"`
	VrfId uint32 `protobuf:"varint,3,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// Enable to run BGP in Multi-VRF mode.
	// If enabled, a single instance of BGP server will maintain a separate routing table for every VRF.
	// Using route distinguishers/targets the server is able to determine for a given path advertisement
	// to which VRF it relates.
	MultiVrf bool `protobuf:"varint,4,opt,name=multi_vrf,json=multiVrf,proto3" json:"multi_vrf,omitempty"`
	// By default the BGP server carries network layer reachability information (NLRI) for address
	// family AFI_IP(6)/SAFI_UNICAST. This field allows to enable multiple address families,
	// i.e. to run multi-protocol BGP (MP-BGP).
	AddrFamilies []*AddressFamily   `protobuf:"bytes,5,rep,name=addr_families,json=addrFamilies,proto3" json:"addr_families,omitempty"`
	Neighbors    []*Router_Neighbor `protobuf:"bytes,6,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{1}
}

func (x *Router) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Router) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Router) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *Router) GetMultiVrf() bool {
	if x != nil {
		return x.MultiVrf
	}
	return false
}

func (x *Router) GetAddrFamilies() []*AddressFamily {
	if x != nil {
		return x.AddrFamilies
	}
	return nil
}

func (x *Router) GetNeighbors() []*Router_Neighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

// BGP configuration to associate with a VPP VRF.
// Configure in multi-VRF mode to differentiate between multiple VRFs using route
// targets and route distinguishers.
// In per-VRF mode this configuration will not be applied.
type Vrf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a VRF as used on VPP.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Route distinguisher is used only within a single internet service provider's
	// network to distinguish the distinct virtual private network (VPN) routes of separate
	// customers who connect to the provider (appended to IP prefixes in the BGP table to keep them unique).
	//
	// Types that are assignable to RouteDistinguisher:
	//
	//	*Vrf_RdType0
	//	*Vrf_RdType1
	//	*Vrf_RdType2
	RouteDistinguisher isVrf_RouteDistinguisher `protobuf_oneof:"route_distinguisher"`
	ImportRouteTargets []*Vrf_RouteTarget       `protobuf:"bytes,5,rep,name=import_route_targets,json=importRouteTargets,proto3" json:"import_route_targets,omitempty"`
	ExportRouteTargets []*Vrf_RouteTarget       `protobuf:"bytes,6,rep,name=export_route_targets,json=exportRouteTargets,proto3" json:"export_route_targets,omitempty"`
}

func (x *Vrf) Reset() {
	*x = Vrf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vrf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vrf) ProtoMessage() {}

func (x *Vrf) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vrf.ProtoReflect.Descriptor instead.
func (*Vrf) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{2}
}

func (x *Vrf) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Vrf) GetRouteDistinguisher() isVrf_RouteDistinguisher {
	if m != nil {
		return m.RouteDistinguisher
	}
	return nil
}

func (x *Vrf) GetRdType0() *Vrf_TwoOctetAsSEC {
	if x, ok := x.GetRouteDistinguisher().(*Vrf_RdType0); ok {
		return x.RdType0
	}
	return nil
}

func (x *Vrf) GetRdType1() *Vrf_IPv4AddressSEC {
	if x, ok := x.GetRouteDistinguisher().(*Vrf_RdType1); ok {
		return x.RdType1
	}
	return nil
}

func (x *Vrf) GetRdType2() *Vrf_FourOctetASSEC {
	if x, ok := x.GetRouteDistinguisher().(*Vrf_RdType2); ok {
		return x.RdType2
	}
	return nil
}

func (x *Vrf) GetImportRouteTargets() []*Vrf_RouteTarget {
	if x != nil {
		return x.ImportRouteTargets
	}
	return nil
}

func (x *Vrf) GetExportRouteTargets() []*Vrf_RouteTarget {
	if x != nil {
		return x.ExportRouteTargets
	}
	return nil
}

type isVrf_RouteDistinguisher interface {
	isVrf_RouteDistinguisher()
}

type Vrf_RdType0 struct {
	RdType0 *Vrf_TwoOctetAsSEC `protobuf:"bytes,2,opt,name=rd_type0,json=rdType0,proto3,oneof"`
}

type Vrf_RdType1 struct {
	RdType1 *Vrf_IPv4AddressSEC `protobuf:"bytes,3,opt,name=rd_type1,json=rdType1,proto3,oneof"`
}

type Vrf_RdType2 struct {
	RdType2 *Vrf_FourOctetASSEC `protobuf:"bytes,4,opt,name=rd_type2,json=rdType2,proto3,oneof"`
}

func (*Vrf_RdType0) isVrf_RouteDistinguisher() {}

func (*Vrf_RdType1) isVrf_RouteDistinguisher() {}

func (*Vrf_RdType2) isVrf_RouteDistinguisher() {}

// Session endpoint is a local side of the BGP session. The session endpoint is bound to a
// local interface and defines BGP connection to the accessible peer, usually on the same
// network. For every peered autonomous system, a separate session endpoint must be configured
// (i.e separate interface is required for every peered remote AS).
// Multiple peer routers with the same autonomous network may be defined in a single session
// endpoint peer object. A session can be configured only if the BGP server is up.
type SessionEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VPP interface used as ingress/egress to the peer(s).
	VppInterface string `protobuf:"bytes,1,opt,name=vpp_interface,json=vppInterface,proto3" json:"vpp_interface,omitempty"`
	// VRF (with ID as used on VPP) to which this session endpoint belongs.
	// Use in the per-VRF BGP server mode to associate session endpoint with the server.
	// The VPP interface has to be inserted into this VRF before the session endpoint can be installed.
	VrfId uint32 `protobuf:"varint,2,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// Remote autonomous system network number.
	RemoteAsn uint32 `protobuf:"varint,3,opt,name=remote_asn,json=remoteAsn,proto3" json:"remote_asn,omitempty"`
	// Enable Bidirectional Forwarding Detection for fast detection of a lost connection to a BGP peer.
	EnableBfd bool                    `protobuf:"varint,4,opt,name=enable_bfd,json=enableBfd,proto3" json:"enable_bfd,omitempty"`
	Peers     []*SessionEndpoint_Peer `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *SessionEndpoint) Reset() {
	*x = SessionEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEndpoint) ProtoMessage() {}

func (x *SessionEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEndpoint.ProtoReflect.Descriptor instead.
func (*SessionEndpoint) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{3}
}

func (x *SessionEndpoint) GetVppInterface() string {
	if x != nil {
		return x.VppInterface
	}
	return ""
}

func (x *SessionEndpoint) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *SessionEndpoint) GetRemoteAsn() uint32 {
	if x != nil {
		return x.RemoteAsn
	}
	return 0
}

func (x *SessionEndpoint) GetEnableBfd() bool {
	if x != nil {
		return x.EnableBfd
	}
	return false
}

func (x *SessionEndpoint) GetPeers() []*SessionEndpoint_Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// Simplified BGP policy is a set of policy entries. Every entry consists of direction and a set
// of statements which are considered for every route the direction applies for.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*Policy_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{4}
}

func (x *Policy) GetEntries() []*Policy_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Directly connected networks which will be advertised by the local
// BGP speaker, no matter whether they will be configured as BGP sessions or not.
// Networks reachable from the server but not listed here will NOT be advertised.
type Router_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network address in the CIDR format.
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// For per-VRF BGP server (multi_vrf=false) a neighbor with zero (i.e. undefined) vrf_id
	// will inherit the VRF of the server.
	VrfId uint32 `protobuf:"varint,2,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (x *Router_Neighbor) Reset() {
	*x = Router_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Neighbor) ProtoMessage() {}

func (x *Router_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Neighbor.ProtoReflect.Descriptor instead.
func (*Router_Neighbor) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Router_Neighbor) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Router_Neighbor) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

// Two-Octet AS Specific Extended Community.
type Vrf_TwoOctetAsSEC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 2 bytes ASN
	AdminAsn uint32 `protobuf:"varint,1,opt,name=admin_asn,json=adminAsn,proto3" json:"admin_asn,omitempty"`
	LocalNum uint32 `protobuf:"varint,2,opt,name=local_num,json=localNum,proto3" json:"local_num,omitempty"`
}

func (x *Vrf_TwoOctetAsSEC) Reset() {
	*x = Vrf_TwoOctetAsSEC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vrf_TwoOctetAsSEC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vrf_TwoOctetAsSEC) ProtoMessage() {}

func (x *Vrf_TwoOctetAsSEC) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vrf_TwoOctetAsSEC.ProtoReflect.Descriptor instead.
func (*Vrf_TwoOctetAsSEC) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Vrf_TwoOctetAsSEC) GetAdminAsn() uint32 {
	if x != nil {
		return x.AdminAsn
	}
	return 0
}

func (x *Vrf_TwoOctetAsSEC) GetLocalNum() uint32 {
	if x != nil {
		return x.LocalNum
	}
	return 0
}

// IPv4 Address Specific Extended Community.
type Vrf_IPv4AddressSEC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 address
	AdminIp  string `protobuf:"bytes,1,opt,name=admin_ip,json=adminIp,proto3" json:"admin_ip,omitempty"`
	LocalNum uint32 `protobuf:"varint,2,opt,name=local_num,json=localNum,proto3" json:"local_num,omitempty"`
}

func (x *Vrf_IPv4AddressSEC) Reset() {
	*x = Vrf_IPv4AddressSEC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vrf_IPv4AddressSEC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vrf_IPv4AddressSEC) ProtoMessage() {}

func (x *Vrf_IPv4AddressSEC) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vrf_IPv4AddressSEC.ProtoReflect.Descriptor instead.
func (*Vrf_IPv4AddressSEC) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Vrf_IPv4AddressSEC) GetAdminIp() string {
	if x != nil {
		return x.AdminIp
	}
	return ""
}

func (x *Vrf_IPv4AddressSEC) GetLocalNum() uint32 {
	if x != nil {
		return x.LocalNum
	}
	return 0
}

// Four-octet AS Specific Extended Community.
type Vrf_FourOctetASSEC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 4 bytes ASN
	AdminAsn uint32 `protobuf:"varint,1,opt,name=admin_asn,json=adminAsn,proto3" json:"admin_asn,omitempty"`
	LocalNum uint32 `protobuf:"varint,2,opt,name=local_num,json=localNum,proto3" json:"local_num,omitempty"`
}

func (x *Vrf_FourOctetASSEC) Reset() {
	*x = Vrf_FourOctetASSEC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vrf_FourOctetASSEC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vrf_FourOctetASSEC) ProtoMessage() {}

func (x *Vrf_FourOctetASSEC) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vrf_FourOctetASSEC.ProtoReflect.Descriptor instead.
func (*Vrf_FourOctetASSEC) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Vrf_FourOctetASSEC) GetAdminAsn() uint32 {
	if x != nil {
		return x.AdminAsn
	}
	return 0
}

func (x *Vrf_FourOctetASSEC) GetLocalNum() uint32 {
	if x != nil {
		return x.LocalNum
	}
	return 0
}

// RouteTarget is a tag attached to an exported route that decides to which VRF the route is imported
// by a receiving BGP router.
type Vrf_RouteTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RouteTarget:
	//
	//	*Vrf_RouteTarget_RtType0
	//	*Vrf_RouteTarget_RtType1
	//	*Vrf_RouteTarget_RtType2
	RouteTarget isVrf_RouteTarget_RouteTarget `protobuf_oneof:"route_target"`
}

func (x *Vrf_RouteTarget) Reset() {
	*x = Vrf_RouteTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vrf_RouteTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vrf_RouteTarget) ProtoMessage() {}

func (x *Vrf_RouteTarget) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vrf_RouteTarget.ProtoReflect.Descriptor instead.
func (*Vrf_RouteTarget) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{2, 3}
}

func (m *Vrf_RouteTarget) GetRouteTarget() isVrf_RouteTarget_RouteTarget {
	if m != nil {
		return m.RouteTarget
	}
	return nil
}

func (x *Vrf_RouteTarget) GetRtType0() *Vrf_TwoOctetAsSEC {
	if x, ok := x.GetRouteTarget().(*Vrf_RouteTarget_RtType0); ok {
		return x.RtType0
	}
	return nil
}

func (x *Vrf_RouteTarget) GetRtType1() *Vrf_IPv4AddressSEC {
	if x, ok := x.GetRouteTarget().(*Vrf_RouteTarget_RtType1); ok {
		return x.RtType1
	}
	return nil
}

func (x *Vrf_RouteTarget) GetRtType2() *Vrf_FourOctetASSEC {
	if x, ok := x.GetRouteTarget().(*Vrf_RouteTarget_RtType2); ok {
		return x.RtType2
	}
	return nil
}

type isVrf_RouteTarget_RouteTarget interface {
	isVrf_RouteTarget_RouteTarget()
}

type Vrf_RouteTarget_RtType0 struct {
	RtType0 *Vrf_TwoOctetAsSEC `protobuf:"bytes,1,opt,name=rt_type0,json=rtType0,proto3,oneof"`
}

type Vrf_RouteTarget_RtType1 struct {
	RtType1 *Vrf_IPv4AddressSEC `protobuf:"bytes,2,opt,name=rt_type1,json=rtType1,proto3,oneof"`
}

type Vrf_RouteTarget_RtType2 struct {
	RtType2 *Vrf_FourOctetASSEC `protobuf:"bytes,3,opt,name=rt_type2,json=rtType2,proto3,oneof"`
}

func (*Vrf_RouteTarget_RtType0) isVrf_RouteTarget_RouteTarget() {}

func (*Vrf_RouteTarget_RtType1) isVrf_RouteTarget_RouteTarget() {}

func (*Vrf_RouteTarget_RtType2) isVrf_RouteTarget_RouteTarget() {}

// Peer describes remote BGP servers.
type SessionEndpoint_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer IP addresses in the CIDR format.
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Enable peer as a route reflector client.
	RouteReflector bool `protobuf:"varint,3,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	// Route reflector cluster ID (Required if RR is enabled).
	ClusterId string                        `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Options   *SessionEndpoint_Peer_Options `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *SessionEndpoint_Peer) Reset() {
	*x = SessionEndpoint_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionEndpoint_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEndpoint_Peer) ProtoMessage() {}

func (x *SessionEndpoint_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEndpoint_Peer.ProtoReflect.Descriptor instead.
func (*SessionEndpoint_Peer) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SessionEndpoint_Peer) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *SessionEndpoint_Peer) GetRouteReflector() bool {
	if x != nil {
		return x.RouteReflector
	}
	return false
}

func (x *SessionEndpoint_Peer) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SessionEndpoint_Peer) GetOptions() *SessionEndpoint_Peer_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

// Optional peer configuration parameters.
type SessionEndpoint_Peer_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The TTL carried in the IP header of BGP packets.
	// Since every incoming packet is punted, the value must be always greater than 1.
	MultiHopTtl uint32 `protobuf:"varint,1,opt,name=multi_hop_ttl,json=multiHopTtl,proto3" json:"multi_hop_ttl,omitempty"`
	// Timeout in seconds between peer connection attempts.
	RetryConnectionTimeout uint32 `protobuf:"varint,2,opt,name=retry_connection_timeout,json=retryConnectionTimeout,proto3" json:"retry_connection_timeout,omitempty"`
	// Time span in seconds between keep-alive messages.
	KeepAliveInterval uint32 `protobuf:"varint,3,opt,name=keep_alive_interval,json=keepAliveInterval,proto3" json:"keep_alive_interval,omitempty"`
	// The hold time specifies how long the server waits for incoming BGP
	// messages before it assumes the peer is dead. Default value is 30 seconds.
	HoldTime uint32 `protobuf:"varint,4,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
}

func (x *SessionEndpoint_Peer_Options) Reset() {
	*x = SessionEndpoint_Peer_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionEndpoint_Peer_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEndpoint_Peer_Options) ProtoMessage() {}

func (x *SessionEndpoint_Peer_Options) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEndpoint_Peer_Options.ProtoReflect.Descriptor instead.
func (*SessionEndpoint_Peer_Options) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *SessionEndpoint_Peer_Options) GetMultiHopTtl() uint32 {
	if x != nil {
		return x.MultiHopTtl
	}
	return 0
}

func (x *SessionEndpoint_Peer_Options) GetRetryConnectionTimeout() uint32 {
	if x != nil {
		return x.RetryConnectionTimeout
	}
	return 0
}

func (x *SessionEndpoint_Peer_Options) GetKeepAliveInterval() uint32 {
	if x != nil {
		return x.KeepAliveInterval
	}
	return 0
}

func (x *SessionEndpoint_Peer_Options) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

type Policy_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction  Policy_Entry_Direction    `protobuf:"varint,2,opt,name=direction,proto3,enum=bgp.Policy_Entry_Direction" json:"direction,omitempty"`
	Statements []*Policy_Entry_Statement `protobuf:"bytes,3,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *Policy_Entry) Reset() {
	*x = Policy_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Entry) ProtoMessage() {}

func (x *Policy_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Entry.ProtoReflect.Descriptor instead.
func (*Policy_Entry) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Policy_Entry) GetDirection() Policy_Entry_Direction {
	if x != nil {
		return x.Direction
	}
	return Policy_Entry_IMPORT
}

func (x *Policy_Entry) GetStatements() []*Policy_Entry_Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

// A statement consists of conditions and actions. If any route in given direction
// fulfills all conditions, an appropriate action is applied to it.
type Policy_Entry_Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions *Policy_Entry_Statement_Condition `protobuf:"bytes,1,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Actions    *Policy_Entry_Statement_Action    `protobuf:"bytes,2,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Policy_Entry_Statement) Reset() {
	*x = Policy_Entry_Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Entry_Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Entry_Statement) ProtoMessage() {}

func (x *Policy_Entry_Statement) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Entry_Statement.ProtoReflect.Descriptor instead.
func (*Policy_Entry_Statement) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Policy_Entry_Statement) GetConditions() *Policy_Entry_Statement_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Policy_Entry_Statement) GetActions() *Policy_Entry_Statement_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Condition is a set of rules. The action is executed when all conditions are
// fulfilled. Conditions may remain empty in order to "match all".
type Policy_Entry_Statement_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prefix is a route destination. Multiple prefixes can be set in single
	// policy statement, they are evaluated as 'ANY OF'.
	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// Neighbor is a path the route was received from. As for prefixes, multiple
	// neighbors may be set.
	Neighbors []string `protobuf:"bytes,2,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Policy_Entry_Statement_Condition) Reset() {
	*x = Policy_Entry_Statement_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Entry_Statement_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Entry_Statement_Condition) ProtoMessage() {}

func (x *Policy_Entry_Statement_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Entry_Statement_Condition.ProtoReflect.Descriptor instead.
func (*Policy_Entry_Statement_Condition) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{4, 0, 0, 0}
}

func (x *Policy_Entry_Statement_Condition) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *Policy_Entry_Statement_Condition) GetNeighbors() []string {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

// At least one action is required.
type Policy_Entry_Statement_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set the local preference to the given value. Keep in mind that the local
	// preference can be exported only to iBGP peers.
	LocalPref uint32 `protobuf:"varint,1,opt,name=local_pref,json=localPref,proto3" json:"local_pref,omitempty"`
}

func (x *Policy_Entry_Statement_Action) Reset() {
	*x = Policy_Entry_Statement_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_bgp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Entry_Statement_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Entry_Statement_Action) ProtoMessage() {}

func (x *Policy_Entry_Statement_Action) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_bgp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Entry_Statement_Action.ProtoReflect.Descriptor instead.
func (*Policy_Entry_Statement_Action) Descriptor() ([]byte, []int) {
	return file_bgp_bgp_proto_rawDescGZIP(), []int{4, 0, 0, 1}
}

func (x *Policy_Entry_Statement_Action) GetLocalPref() uint32 {
	if x != nil {
		return x.LocalPref
	}
	return 0
}

var File_bgp_bgp_proto protoreflect.FileDescriptor

var file_bgp_bgp_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x62, 0x67, 0x70, 0x22, 0x80, 0x04, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x66, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x41, 0x66, 0x69, 0x52, 0x03, 0x61, 0x66, 0x69,
	0x12, 0x2b, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x2e, 0x53, 0x61, 0x66, 0x69, 0x52, 0x04, 0x73, 0x61, 0x66, 0x69, 0x22, 0x5e, 0x0a,
	0x03, 0x41, 0x66, 0x69, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x36, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x46, 0x49, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x10, 0x19, 0x12, 0x0c, 0x0a,
	0x06, 0x41, 0x46, 0x49, 0x5f, 0x4c, 0x53, 0x10, 0x84, 0x80, 0x01, 0x12, 0x10, 0x0a, 0x0a, 0x41,
	0x46, 0x49, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x10, 0x8d, 0x80, 0x01, 0x22, 0xb7, 0x02,
	0x0a, 0x04, 0x53, 0x61, 0x66, 0x69, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x46, 0x49,
	0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x45, 0x4e, 0x43, 0x41,
	0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x41, 0x46, 0x49, 0x5f, 0x56, 0x50, 0x4c, 0x53, 0x10, 0x41, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x10, 0x46, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x41, 0x46,
	0x49, 0x5f, 0x4c, 0x53, 0x10, 0x47, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x41,
	0x46, 0x49, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x56, 0x50, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x81, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x41, 0x46, 0x49,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x84, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x53, 0x41, 0x46, 0x49, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x85, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x41, 0x46,
	0x49, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x56, 0x50, 0x4e, 0x10,
	0x86, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0xf1, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x61, 0x73, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x76, 0x72, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x72, 0x66, 0x12, 0x37, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x76,
	0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66,
	0x49, 0x64, 0x22, 0xff, 0x05, 0x0a, 0x03, 0x56, 0x72, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x67, 0x70, 0x2e, 0x56, 0x72, 0x66, 0x2e, 0x54, 0x77, 0x6f, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x41,
	0x73, 0x53, 0x45, 0x43, 0x48, 0x00, 0x52, 0x07, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x30, 0x12,
	0x34, 0x0a, 0x08, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x56, 0x72, 0x66, 0x2e, 0x49, 0x50, 0x76, 0x34,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x45, 0x43, 0x48, 0x00, 0x52, 0x07, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x56, 0x72,
	0x66, 0x2e, 0x46, 0x6f, 0x75, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x41, 0x53, 0x53, 0x45, 0x43,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x32, 0x12, 0x46, 0x0a, 0x14, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x67, 0x70, 0x2e,
	0x56, 0x72, 0x66, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x56, 0x72, 0x66, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x0d, 0x54,
	0x77, 0x6f, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x41, 0x73, 0x53, 0x45, 0x43, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x73, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x1a, 0x48, 0x0a, 0x0e, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x45, 0x43, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x1a, 0x4a, 0x0a, 0x0e, 0x46, 0x6f, 0x75, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x41, 0x53, 0x53,
	0x45, 0x43, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x73, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x1a, 0xbe, 0x01, 0x0a,
	0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x56, 0x72, 0x66, 0x2e, 0x54, 0x77, 0x6f, 0x4f, 0x63, 0x74, 0x65,
	0x74, 0x41, 0x73, 0x53, 0x45, 0x43, 0x48, 0x00, 0x52, 0x07, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x30, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x56, 0x72, 0x66, 0x2e, 0x49, 0x50,
	0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x45, 0x43, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x70, 0x2e,
	0x56, 0x72, 0x66, 0x2e, 0x46, 0x6f, 0x75, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x41, 0x53, 0x53,
	0x45, 0x43, 0x48, 0x00, 0x52, 0x07, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x42, 0x0e, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x22, 0xa0, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x70, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x72, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x66,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x66, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x1a, 0xe1, 0x02, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0xb4, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x6f, 0x70, 0x54, 0x74, 0x6c,
	0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6b, 0x65,
	0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68,
	0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdf, 0x03, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0xa7, 0x03, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62,
	0x67, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x80, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x45, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0x27, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x22, 0x23, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x70, 0x61, 0x6e,
	0x74, 0x68, 0x65, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6e, 0x66, 0x2d, 0x66,
	0x72, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x3b, 0x62, 0x67, 0x70,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bgp_bgp_proto_rawDescOnce sync.Once
	file_bgp_bgp_proto_rawDescData = file_bgp_bgp_proto_rawDesc
)

func file_bgp_bgp_proto_rawDescGZIP() []byte {
	file_bgp_bgp_proto_rawDescOnce.Do(func() {
		file_bgp_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgp_bgp_proto_rawDescData)
	})
	return file_bgp_bgp_proto_rawDescData
}

var file_bgp_bgp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bgp_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_bgp_bgp_proto_goTypes = []interface{}{
	(AddressFamily_Afi)(0),                   // 0: bgp.AddressFamily.Afi
	(AddressFamily_Safi)(0),                  // 1: bgp.AddressFamily.Safi
	(Policy_Entry_Direction)(0),              // 2: bgp.Policy.Entry.Direction
	(*AddressFamily)(nil),                    // 3: bgp.AddressFamily
	(*Router)(nil),                           // 4: bgp.Router
	(*Vrf)(nil),                              // 5: bgp.Vrf
	(*SessionEndpoint)(nil),                  // 6: bgp.SessionEndpoint
	(*Policy)(nil),                           // 7: bgp.Policy
	(*Router_Neighbor)(nil),                  // 8: bgp.Router.Neighbor
	(*Vrf_TwoOctetAsSEC)(nil),                // 9: bgp.Vrf.TwoOctetAsSEC
	(*Vrf_IPv4AddressSEC)(nil),               // 10: bgp.Vrf.IPv4AddressSEC
	(*Vrf_FourOctetASSEC)(nil),               // 11: bgp.Vrf.FourOctetASSEC
	(*Vrf_RouteTarget)(nil),                  // 12: bgp.Vrf.RouteTarget
	(*SessionEndpoint_Peer)(nil),             // 13: bgp.SessionEndpoint.Peer
	(*SessionEndpoint_Peer_Options)(nil),     // 14: bgp.SessionEndpoint.Peer.Options
	(*Policy_Entry)(nil),                     // 15: bgp.Policy.Entry
	(*Policy_Entry_Statement)(nil),           // 16: bgp.Policy.Entry.Statement
	(*Policy_Entry_Statement_Condition)(nil), // 17: bgp.Policy.Entry.Statement.Condition
	(*Policy_Entry_Statement_Action)(nil),    // 18: bgp.Policy.Entry.Statement.Action
}
var file_bgp_bgp_proto_depIdxs = []int32{
	0,  // 0: bgp.AddressFamily.afi:type_name -> bgp.AddressFamily.Afi
	1,  // 1: bgp.AddressFamily.safi:type_name -> bgp.AddressFamily.Safi
	3,  // 2: bgp.Router.addr_families:type_name -> bgp.AddressFamily
	8,  // 3: bgp.Router.neighbors:type_name -> bgp.Router.Neighbor
	9,  // 4: bgp.Vrf.rd_type0:type_name -> bgp.Vrf.TwoOctetAsSEC
	10, // 5: bgp.Vrf.rd_type1:type_name -> bgp.Vrf.IPv4AddressSEC
	11, // 6: bgp.Vrf.rd_type2:type_name -> bgp.Vrf.FourOctetASSEC
	12, // 7: bgp.Vrf.import_route_targets:type_name -> bgp.Vrf.RouteTarget
	12, // 8: bgp.Vrf.export_route_targets:type_name -> bgp.Vrf.RouteTarget
	13, // 9: bgp.SessionEndpoint.peers:type_name -> bgp.SessionEndpoint.Peer
	15, // 10: bgp.Policy.entries:type_name -> bgp.Policy.Entry
	9,  // 11: bgp.Vrf.RouteTarget.rt_type0:type_name -> bgp.Vrf.TwoOctetAsSEC
	10, // 12: bgp.Vrf.RouteTarget.rt_type1:type_name -> bgp.Vrf.IPv4AddressSEC
	11, // 13: bgp.Vrf.RouteTarget.rt_type2:type_name -> bgp.Vrf.FourOctetASSEC
	14, // 14: bgp.SessionEndpoint.Peer.options:type_name -> bgp.SessionEndpoint.Peer.Options
	2,  // 15: bgp.Policy.Entry.direction:type_name -> bgp.Policy.Entry.Direction
	16, // 16: bgp.Policy.Entry.statements:type_name -> bgp.Policy.Entry.Statement
	17, // 17: bgp.Policy.Entry.Statement.conditions:type_name -> bgp.Policy.Entry.Statement.Condition
	18, // 18: bgp.Policy.Entry.Statement.actions:type_name -> bgp.Policy.Entry.Statement.Action
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_bgp_bgp_proto_init() }
func file_bgp_bgp_proto_init() {
	if File_bgp_bgp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bgp_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vrf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vrf_TwoOctetAsSEC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vrf_IPv4AddressSEC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vrf_FourOctetASSEC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vrf_RouteTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionEndpoint_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionEndpoint_Peer_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Entry_Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Entry_Statement_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_bgp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Entry_Statement_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bgp_bgp_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Vrf_RdType0)(nil),
		(*Vrf_RdType1)(nil),
		(*Vrf_RdType2)(nil),
	}
	file_bgp_bgp_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Vrf_RouteTarget_RtType0)(nil),
		(*Vrf_RouteTarget_RtType1)(nil),
		(*Vrf_RouteTarget_RtType2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgp_bgp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bgp_bgp_proto_goTypes,
		DependencyIndexes: file_bgp_bgp_proto_depIdxs,
		EnumInfos:         file_bgp_bgp_proto_enumTypes,
		MessageInfos:      file_bgp_bgp_proto_msgTypes,
	}.Build()
	File_bgp_bgp_proto = out.File
	file_bgp_bgp_proto_rawDesc = nil
	file_bgp_bgp_proto_goTypes = nil
	file_bgp_bgp_proto_depIdxs = nil
}
