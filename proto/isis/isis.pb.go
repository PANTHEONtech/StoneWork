// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.13.0
// source: isis/isis.proto

package isis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All possible ISIS area types/levels.
type Area int32

const (
	Area_L1_AREA Area = 0
	Area_L2_AREA Area = 1
)

// Enum value maps for Area.
var (
	Area_name = map[int32]string{
		0: "L1_AREA",
		1: "L2_AREA",
	}
	Area_value = map[string]int32{
		"L1_AREA": 0,
		"L2_AREA": 1,
	}
)

func (x Area) Enum() *Area {
	p := new(Area)
	*p = x
	return p
}

func (x Area) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Area) Descriptor() protoreflect.EnumDescriptor {
	return file_isis_isis_proto_enumTypes[0].Descriptor()
}

func (Area) Type() protoreflect.EnumType {
	return &file_isis_isis_proto_enumTypes[0]
}

func (x Area) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Area.Descriptor instead.
func (Area) EnumDescriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{0}
}

// All combinations of ISIS areas types/levels.
// This type can be used to indicate to which ISIS area(s) is the given configuration
// referring to/is involved with.
type AreasInvolved int32

const (
	AreasInvolved_L1    AreasInvolved = 0
	AreasInvolved_L2    AreasInvolved = 1
	AreasInvolved_L1_L2 AreasInvolved = 2
)

// Enum value maps for AreasInvolved.
var (
	AreasInvolved_name = map[int32]string{
		0: "L1",
		1: "L2",
		2: "L1_L2",
	}
	AreasInvolved_value = map[string]int32{
		"L1":    0,
		"L2":    1,
		"L1_L2": 2,
	}
)

func (x AreasInvolved) Enum() *AreasInvolved {
	p := new(AreasInvolved)
	*p = x
	return p
}

func (x AreasInvolved) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AreasInvolved) Descriptor() protoreflect.EnumDescriptor {
	return file_isis_isis_proto_enumTypes[1].Descriptor()
}

func (AreasInvolved) Type() protoreflect.EnumType {
	return &file_isis_isis_proto_enumTypes[1]
}

func (x AreasInvolved) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AreasInvolved.Descriptor instead.
func (AreasInvolved) EnumDescriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{1}
}

// RedistributionSources are all types of source that can be used to import new routes to ISIS route tables
// outside of ISIS network
type RedistributionSources int32

const (
	RedistributionSources_BGP       RedistributionSources = 0
	RedistributionSources_CONNECTED RedistributionSources = 1
	RedistributionSources_KERNEL    RedistributionSources = 2
	RedistributionSources_OSPF      RedistributionSources = 3
	RedistributionSources_OSPF6     RedistributionSources = 4
	RedistributionSources_STATIC    RedistributionSources = 5
	RedistributionSources_TABLE     RedistributionSources = 6
	RedistributionSources_VNC       RedistributionSources = 7
)

// Enum value maps for RedistributionSources.
var (
	RedistributionSources_name = map[int32]string{
		0: "BGP",
		1: "CONNECTED",
		2: "KERNEL",
		3: "OSPF",
		4: "OSPF6",
		5: "STATIC",
		6: "TABLE",
		7: "VNC",
	}
	RedistributionSources_value = map[string]int32{
		"BGP":       0,
		"CONNECTED": 1,
		"KERNEL":    2,
		"OSPF":      3,
		"OSPF6":     4,
		"STATIC":    5,
		"TABLE":     6,
		"VNC":       7,
	}
)

func (x RedistributionSources) Enum() *RedistributionSources {
	p := new(RedistributionSources)
	*p = x
	return p
}

func (x RedistributionSources) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedistributionSources) Descriptor() protoreflect.EnumDescriptor {
	return file_isis_isis_proto_enumTypes[2].Descriptor()
}

func (RedistributionSources) Type() protoreflect.EnumType {
	return &file_isis_isis_proto_enumTypes[2]
}

func (x RedistributionSources) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedistributionSources.Descriptor instead.
func (RedistributionSources) EnumDescriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{2}
}

// IPAddressFamily are all IP address families
type IPAddressFamily int32

const (
	IPAddressFamily_IPV4 IPAddressFamily = 0
	IPAddressFamily_IPV6 IPAddressFamily = 1
)

// Enum value maps for IPAddressFamily.
var (
	IPAddressFamily_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	IPAddressFamily_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x IPAddressFamily) Enum() *IPAddressFamily {
	p := new(IPAddressFamily)
	*p = x
	return p
}

func (x IPAddressFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPAddressFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_isis_isis_proto_enumTypes[3].Descriptor()
}

func (IPAddressFamily) Type() protoreflect.EnumType {
	return &file_isis_isis_proto_enumTypes[3]
}

func (x IPAddressFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPAddressFamily.Descriptor instead.
func (IPAddressFamily) EnumDescriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{3}
}

// Definition of the ISIS Router.
// (FRR API is prepared for creating more than one ISIS router by specifying router ID string, but current
// FRR implementation doesn't support that -> modeling here only one global ISIS router)
type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of router based on the ISIS areas that this router should be involved with.
	Type AreasInvolved `protobuf:"varint,1,opt,name=type,proto3,enum=isis.AreasInvolved" json:"type,omitempty"`
	// Network Entity Title (NET) identifies this router in the ISIS network. It is mandatory.
	// It must follow the pattern  [a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){3,9}\\.[a-fA-F0-9]{2}
	// Example: 11.1111.2222.2222.2222.00
	// (11.1111 = unique area id, 2222.2222.2222 is unique id within area, 00 = NSEL-always 00 for ISIS)
	Net            string                 `protobuf:"bytes,2,opt,name=net,proto3" json:"net,omitempty"`
	Redistribution *Router_Redistribution `protobuf:"bytes,3,opt,name=redistribution,proto3" json:"redistribution,omitempty"`
	// The minimum interval for regenerating the same LSP(Link State PDU (Protocol Data Unit)).
	// Could be set for area levels separately. The configured interval must be in range of 1-120 seconds.
	LspGenIntervals []*Timer `protobuf:"bytes,4,rep,name=lsp_gen_intervals,json=lspGenIntervals,proto3" json:"lsp_gen_intervals,omitempty"`
	// The LSP(Link State PDU (Protocol Data Unit)) refresh interval.
	// Could be set for area levels separately. The configured interval must be in range of 1-65235 seconds.
	LspRefreshIntervals []*Timer `protobuf:"bytes,5,rep,name=lsp_refresh_intervals,json=lspRefreshIntervals,proto3" json:"lsp_refresh_intervals,omitempty"`
	// The minimum interval between consecutive SPF(Shortest Path First) calculations.
	// Could be set for area levels separately. The configured interval must be in range of 1-120 seconds.
	SpfIntervals []*Timer `protobuf:"bytes,6,rep,name=spf_intervals,json=spfIntervals,proto3" json:"spf_intervals,omitempty"`
	// The Maximum LSP(Link State PDU (Protocol Data Unit)) lifetime.
	// Could be set for area levels separately. The configured interval must be in range of 360-65535 seconds.
	MaxLspLifetimes []*Timer `protobuf:"bytes,7,rep,name=max_lsp_lifetimes,json=maxLspLifetimes,proto3" json:"max_lsp_lifetimes,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isis_isis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_isis_isis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{0}
}

func (x *Router) GetType() AreasInvolved {
	if x != nil {
		return x.Type
	}
	return AreasInvolved_L1
}

func (x *Router) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

func (x *Router) GetRedistribution() *Router_Redistribution {
	if x != nil {
		return x.Redistribution
	}
	return nil
}

func (x *Router) GetLspGenIntervals() []*Timer {
	if x != nil {
		return x.LspGenIntervals
	}
	return nil
}

func (x *Router) GetLspRefreshIntervals() []*Timer {
	if x != nil {
		return x.LspRefreshIntervals
	}
	return nil
}

func (x *Router) GetSpfIntervals() []*Timer {
	if x != nil {
		return x.SpfIntervals
	}
	return nil
}

func (x *Router) GetMaxLspLifetimes() []*Timer {
	if x != nil {
		return x.MaxLspLifetimes
	}
	return nil
}

// ISIS enabled interface.
// This configuration contains only ISIS-specific configuration for interface.
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical name of a VPP interface. It is mandatory.
	VppInterface string `protobuf:"bytes,1,opt,name=vpp_interface,json=vppInterface,proto3" json:"vpp_interface,omitempty"`
	// Enable to make this interface passive for ISIS. That means that information about this interface is
	// distributed in ISIS network, but ISIS router does not try to reach other ISIS routers using
	// this interface (interface is passive for ISIS traffic). The passive interface can be viewed as
	// entry/exit point into/from ISIS network for data traffic.
	Passive bool `protobuf:"varint,2,opt,name=passive,proto3" json:"passive,omitempty"`
	// Type of ISIS circuits/areas that this interface is part of.
	// This setting limits the building of ISIS circuits by limiting what ISIS adjacency connection can be made,
	// i.e. interface with circuit_type 1 can create ISIS adjacency with direct neighbor that has also
	// circuit_type 1 (this how ISIS L1 area can form itself), but not with neighbor with circuit_type 2.
	CircuitType AreasInvolved `protobuf:"varint,3,opt,name=circuit_type,json=circuitType,proto3,enum=isis.AreasInvolved" json:"circuit_type,omitempty"`
	// Sending interval for Hello packets. Could set interval in each area level separately. The hello packets
	// handle the initial connection and the continuing adjacency checks. The configured intervals must be
	// in range of 1-600 seconds.
	HelloIntervals []*Timer `protobuf:"bytes,4,rep,name=hello_intervals,json=helloIntervals,proto3" json:"hello_intervals,omitempty"`
	// Sending interval for CSNP packets (Complete Sequence Number PDU (Protocol Data Unit)). Could set interval
	// in each area level separately. The CSNP packets hold ISIS route information. The configured interval
	// must be in range of 1-600 seconds.
	CsnpIntervals []*Timer `protobuf:"bytes,5,rep,name=csnp_intervals,json=csnpIntervals,proto3" json:"csnp_intervals,omitempty"`
	// Sending interval for PSNP packets (Partial Sequence Number PDU (Protocol Data Unit)). Could set interval
	// in each area level separately. These packets are used for handling route information discrepancies.
	// The configured interval must be in range of 1-120 seconds.
	PsnpIntervals []*Timer `protobuf:"bytes,6,rep,name=psnp_intervals,json=psnpIntervals,proto3" json:"psnp_intervals,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isis_isis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_isis_isis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{1}
}

func (x *Interface) GetVppInterface() string {
	if x != nil {
		return x.VppInterface
	}
	return ""
}

func (x *Interface) GetPassive() bool {
	if x != nil {
		return x.Passive
	}
	return false
}

func (x *Interface) GetCircuitType() AreasInvolved {
	if x != nil {
		return x.CircuitType
	}
	return AreasInvolved_L1
}

func (x *Interface) GetHelloIntervals() []*Timer {
	if x != nil {
		return x.HelloIntervals
	}
	return nil
}

func (x *Interface) GetCsnpIntervals() []*Timer {
	if x != nil {
		return x.CsnpIntervals
	}
	return nil
}

func (x *Interface) GetPsnpIntervals() []*Timer {
	if x != nil {
		return x.PsnpIntervals
	}
	return nil
}

// Generic time setting for different area levels
type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in seconds
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// The ISIS area that the time setting should be applied to
	Level Area `protobuf:"varint,2,opt,name=level,proto3,enum=isis.Area" json:"level,omitempty"`
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isis_isis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_isis_isis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{2}
}

func (x *Timer) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timer) GetLevel() Area {
	if x != nil {
		return x.Level
	}
	return Area_L1_AREA
}

// Redistribution configures learning of routes from other types distribution protocols/sources.
// ISIS deamon will continually learn new routes defined in source('source') and installs it into route table
// for given area level ('destination_area') and given ip address family ('ip_address_family').
type Router_Redistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source is the route source that is used to import into ISIS route tables. These routes are filtered by
	// ip address family ('ip_address_family').
	Source RedistributionSources `protobuf:"varint,2,opt,name=source,proto3,enum=isis.RedistributionSources" json:"source,omitempty"`
	// destination_area define together with ip_address_family the destination route table for learned routes
	// from 'source'
	DestinationArea Area `protobuf:"varint,1,opt,name=destination_area,json=destinationArea,proto3,enum=isis.Area" json:"destination_area,omitempty"`
	// ip_address_family is route filtering based on ip address used. It filters which routes should be learned.
	// It also defines which ISIS route table should be used (there are 2 different ISIS route tables based
	// on the ip address family).
	IpAddressFamily IPAddressFamily `protobuf:"varint,3,opt,name=ip_address_family,json=ipAddressFamily,proto3,enum=isis.IPAddressFamily" json:"ip_address_family,omitempty"`
}

func (x *Router_Redistribution) Reset() {
	*x = Router_Redistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isis_isis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Redistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Redistribution) ProtoMessage() {}

func (x *Router_Redistribution) ProtoReflect() protoreflect.Message {
	mi := &file_isis_isis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Redistribution.ProtoReflect.Descriptor instead.
func (*Router_Redistribution) Descriptor() ([]byte, []int) {
	return file_isis_isis_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Router_Redistribution) GetSource() RedistributionSources {
	if x != nil {
		return x.Source
	}
	return RedistributionSources_BGP
}

func (x *Router_Redistribution) GetDestinationArea() Area {
	if x != nil {
		return x.DestinationArea
	}
	return Area_L1_AREA
}

func (x *Router_Redistribution) GetIpAddressFamily() IPAddressFamily {
	if x != nil {
		return x.IpAddressFamily
	}
	return IPAddressFamily_IPV4
}

var File_isis_isis_proto protoreflect.FileDescriptor

var file_isis_isis_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x73, 0x69, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x69, 0x73, 0x69, 0x73, 0x22, 0xaf, 0x04, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x49, 0x6e, 0x76,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x43, 0x0a,
	0x0e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x11, 0x6c, 0x73, 0x70, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0f, 0x6c, 0x73, 0x70, 0x47,
	0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x15, 0x6c,
	0x73, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x13, 0x6c, 0x73, 0x70, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x0d,
	0x73, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x52, 0x0c, 0x73, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x37,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4c, 0x73, 0x70, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x41, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0f, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0xa0, 0x02, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x70, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x0f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0e, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x73, 0x6e, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0e, 0x70, 0x73, 0x6e, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0d, 0x70,
	0x73, 0x6e, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x43, 0x0a, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x20, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x2a, 0x20, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x31, 0x5f,
	0x41, 0x52, 0x45, 0x41, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x32, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x10, 0x01, 0x2a, 0x2a, 0x0a, 0x0d, 0x41, 0x72, 0x65, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x31, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x4c, 0x32, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x31, 0x5f, 0x4c, 0x32, 0x10, 0x02, 0x2a,
	0x70, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x50, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x53, 0x50, 0x46, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x53, 0x50, 0x46, 0x36, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x4e, 0x43, 0x10,
	0x07, 0x2a, 0x25, 0x0a, 0x0f, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x70, 0x61, 0x6e, 0x74,
	0x68, 0x65, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x6e, 0x66, 0x2d, 0x66, 0x72,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x3b, 0x69, 0x73, 0x69,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_isis_isis_proto_rawDescOnce sync.Once
	file_isis_isis_proto_rawDescData = file_isis_isis_proto_rawDesc
)

func file_isis_isis_proto_rawDescGZIP() []byte {
	file_isis_isis_proto_rawDescOnce.Do(func() {
		file_isis_isis_proto_rawDescData = protoimpl.X.CompressGZIP(file_isis_isis_proto_rawDescData)
	})
	return file_isis_isis_proto_rawDescData
}

var file_isis_isis_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_isis_isis_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_isis_isis_proto_goTypes = []interface{}{
	(Area)(0),                     // 0: isis.Area
	(AreasInvolved)(0),            // 1: isis.AreasInvolved
	(RedistributionSources)(0),    // 2: isis.RedistributionSources
	(IPAddressFamily)(0),          // 3: isis.IPAddressFamily
	(*Router)(nil),                // 4: isis.Router
	(*Interface)(nil),             // 5: isis.Interface
	(*Timer)(nil),                 // 6: isis.Timer
	(*Router_Redistribution)(nil), // 7: isis.Router.Redistribution
}
var file_isis_isis_proto_depIdxs = []int32{
	1,  // 0: isis.Router.type:type_name -> isis.AreasInvolved
	7,  // 1: isis.Router.redistribution:type_name -> isis.Router.Redistribution
	6,  // 2: isis.Router.lsp_gen_intervals:type_name -> isis.Timer
	6,  // 3: isis.Router.lsp_refresh_intervals:type_name -> isis.Timer
	6,  // 4: isis.Router.spf_intervals:type_name -> isis.Timer
	6,  // 5: isis.Router.max_lsp_lifetimes:type_name -> isis.Timer
	1,  // 6: isis.Interface.circuit_type:type_name -> isis.AreasInvolved
	6,  // 7: isis.Interface.hello_intervals:type_name -> isis.Timer
	6,  // 8: isis.Interface.csnp_intervals:type_name -> isis.Timer
	6,  // 9: isis.Interface.psnp_intervals:type_name -> isis.Timer
	0,  // 10: isis.Timer.level:type_name -> isis.Area
	2,  // 11: isis.Router.Redistribution.source:type_name -> isis.RedistributionSources
	0,  // 12: isis.Router.Redistribution.destination_area:type_name -> isis.Area
	3,  // 13: isis.Router.Redistribution.ip_address_family:type_name -> isis.IPAddressFamily
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_isis_isis_proto_init() }
func file_isis_isis_proto_init() {
	if File_isis_isis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_isis_isis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isis_isis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isis_isis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isis_isis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Redistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_isis_isis_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_isis_isis_proto_goTypes,
		DependencyIndexes: file_isis_isis_proto_depIdxs,
		EnumInfos:         file_isis_isis_proto_enumTypes,
		MessageInfos:      file_isis_isis_proto_msgTypes,
	}.Build()
	File_isis_isis_proto = out.File
	file_isis_isis_proto_rawDesc = nil
	file_isis_isis_proto_goTypes = nil
	file_isis_isis_proto_depIdxs = nil
}
