// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package abx

import (
	"context"
	"fmt"
	"io"

	api "git.fd.io/govpp.git/api"
	memclnt "go.pantheon.tech/stonework/plugins/binapi/vpp2202/memclnt"
)

// RPCService defines RPC service abx.
type RPCService interface {
	AbxInterfaceAttachDetach(ctx context.Context, in *AbxInterfaceAttachDetach) (*AbxInterfaceAttachDetachReply, error)
	AbxInterfaceAttachDump(ctx context.Context, in *AbxInterfaceAttachDump) (RPCService_AbxInterfaceAttachDumpClient, error)
	AbxPluginGetVersion(ctx context.Context, in *AbxPluginGetVersion) (*AbxPluginGetVersionReply, error)
	AbxPolicyAddDel(ctx context.Context, in *AbxPolicyAddDel) (*AbxPolicyAddDelReply, error)
	AbxPolicyDump(ctx context.Context, in *AbxPolicyDump) (RPCService_AbxPolicyDumpClient, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) AbxInterfaceAttachDetach(ctx context.Context, in *AbxInterfaceAttachDetach) (*AbxInterfaceAttachDetachReply, error) {
	out := new(AbxInterfaceAttachDetachReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) AbxInterfaceAttachDump(ctx context.Context, in *AbxInterfaceAttachDump) (RPCService_AbxInterfaceAttachDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_AbxInterfaceAttachDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&memclnt.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_AbxInterfaceAttachDumpClient interface {
	Recv() (*AbxInterfaceAttachDetails, error)
	api.Stream
}

type serviceClient_AbxInterfaceAttachDumpClient struct {
	api.Stream
}

func (c *serviceClient_AbxInterfaceAttachDumpClient) Recv() (*AbxInterfaceAttachDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *AbxInterfaceAttachDetails:
		return m, nil
	case *memclnt.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) AbxPluginGetVersion(ctx context.Context, in *AbxPluginGetVersion) (*AbxPluginGetVersionReply, error) {
	out := new(AbxPluginGetVersionReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AbxPolicyAddDel(ctx context.Context, in *AbxPolicyAddDel) (*AbxPolicyAddDelReply, error) {
	out := new(AbxPolicyAddDelReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) AbxPolicyDump(ctx context.Context, in *AbxPolicyDump) (RPCService_AbxPolicyDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_AbxPolicyDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&memclnt.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_AbxPolicyDumpClient interface {
	Recv() (*AbxPolicyDetails, error)
	api.Stream
}

type serviceClient_AbxPolicyDumpClient struct {
	api.Stream
}

func (c *serviceClient_AbxPolicyDumpClient) Recv() (*AbxPolicyDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *AbxPolicyDetails:
		return m, nil
	case *memclnt.ControlPingReply:
		err = c.Stream.Close()
		if err != nil {
			return nil, err
		}
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}
