/*
 * abx.api - binary API skeleton
 *
 * Copyright (c) 2022 PANTHEON.tech s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file abx.api
 * @brief VPP control-plane API messages.
 *
 * This file defines VPP control-plane binary API messages which are generally
 * called through a shared memory interface.
 */

/* Version and type recitations */

option version = "0.1.0";
import "vnet/interface_types.api";
import "vnet/ethernet/ethernet_types.api";

/** \brief Get the plugin version
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define abx_plugin_get_version
{
  u32 client_index;
  u32 context;
};

/** \brief Reply to get the plugin version
    @param context - returned sender context, to match reply w/ request
    @param major - Incremented every time a known breaking behavior change is introduced
    @param minor - Incremented with small changes, may be used to avoid buggy versions
*/
define abx_plugin_get_version_reply
{
  u32 context;
  u32 major;
  u32 minor;
};

/** \brief A description of an ABX policy
    @param policy_id User chosen Identifier for the policy
    @param acl_index The ACL that the policy will match against
    @param tx_sw_if_index Tx interface index to be used for forwarding
 */
typedef abx_policy
{
  u32 policy_id;
  u32 acl_index;
  u32 tx_sw_if_index;
  vl_api_mac_address_t dst_mac;
};

/** \brief A description of a policy attachment to an interface
    @param The policy ID to attach
    @param priority The priority of the attachment, w.r.t. to other attachments
                    on this interface. lower value is 'better'
    @param rx_sw_if_index The interface to attach to
 */
typedef abx_interface_attach
{
  u32 policy_id;
  u32 priority;
  u32 rx_sw_if_index;
};

/** \brief A description of an ABX policy
    @param is_add Is this the addition or removal of paths from the policy
           If the policy does not exist it is created. If the last path
           Is being removed, the policy is deleted
    @param policy The ABX policy
 */
autoreply define abx_policy_add_del
{
  u32 client_index;
  u32 context;
  u8 is_add;
  vl_api_abx_policy_t policy;
};

/** \brief A description of an ABX interface attach
*/
autoreply define abx_interface_attach_detach
{
  u32 client_index;
  u32 context;
  u8  is_attach;
  vl_api_abx_interface_attach_t attach;
};

/** \brief Dump ABX policies response
    @param policy - the ABX policy
*/
define abx_policy_details {
  u32 context;
  vl_api_abx_policy_t policy;
};

/** \brief Dump ABX policies
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define abx_policy_dump {
  u32 client_index;
  u32 context;
};

/** \brief Dump interfaces with attached ABX policies response
    @param priority - priority of ABX policy
    @param policy_id - id of ABX policy
*/
define abx_interface_attach_details {
  u32 context;
  vl_api_abx_interface_attach_t attach;
};

/** \brief Dump interfaces with attached ABX policies
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define abx_interface_attach_dump {
  u32 client_index;
  u32 context;
};
